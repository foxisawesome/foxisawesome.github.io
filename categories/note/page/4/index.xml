<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>note on Q. Weng</title>
    <link>https://foxisawesome.github.io/categories/note/</link>
    <description>Recent content in note on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 06 Dec 2020 16:48:55 -0500</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/categories/note/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>682 Baseball Game</title>
      <link>https://foxisawesome.github.io/posts/682-baseball-game/</link>
      <pubDate>Mon, 19 Oct 2020 16:34:58 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/682-baseball-game/</guid>
      <description>LC 682 Baseball Game You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds&#39; scores. At the beginning of the game, you start with an empty record. You are given a list of strings ops, where ops[i] is the ith operation you must apply to the record and is one of the following:</description>
    </item>
    
    <item>
      <title>1167 Minimum Cost to Connect Sticks</title>
      <link>https://foxisawesome.github.io/posts/1167-minimum-cost-to-connect-sticks/</link>
      <pubDate>Mon, 19 Oct 2020 16:16:26 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1167-minimum-cost-to-connect-sticks/</guid>
      <description>LC 1167 Minimum Cost to Connect Sticks You have some number of sticks with positive integer lengths. These lengths are given as an array sticks, where sticks[i] is the length of the ith stick. You can connect any two sticks of lengths x and y into one stick by paying a cost of x + y. You must connect all the sticks until there is only one stick remaining. Return</description>
    </item>
    
    <item>
      <title>1083 Sales Analysis II</title>
      <link>https://foxisawesome.github.io/posts/1083-sales-analysis-ii/</link>
      <pubDate>Mon, 19 Oct 2020 15:30:49 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1083-sales-analysis-ii/</guid>
      <description>LC 1083 Sales Analysis II Write an SQL query that reports the buyers who have bought S8 but not iPhone. Note that S8 and iPhone are products present in the Product table. The query result format is in the following example: Product table: +------------+--------------+------------+ | product_id | product_name | unit_price | +------------+--------------+------------+ | 1 | S8 | 1000 | | 2 | G4 | 800 | | 3 | iPhone</description>
    </item>
    
    <item>
      <title>1495 Friendly Movies Streamed Last Month</title>
      <link>https://foxisawesome.github.io/posts/1495-friendly-movies-streamed-last-month/</link>
      <pubDate>Mon, 19 Oct 2020 15:22:26 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1495-friendly-movies-streamed-last-month/</guid>
      <description>LC 1495 Friendly Movies Streamed Last Month   Write an SQL query to report the distinct titles of the kid-friendly movies streamed in June 2020.
Return the result table in any order.
 Solution 2020-10-19 Notes: select distinct title from content a join TVProgram b on a.content_id = b.content_id where a.kids_content = &#39;Y&#39; and a.content_type = &#39;Movies&#39; and month(b.program_date) = 6  </description>
    </item>
    
    <item>
      <title>1076 Project Employees II</title>
      <link>https://foxisawesome.github.io/posts/1076-project-employees-ii/</link>
      <pubDate>Mon, 19 Oct 2020 15:19:45 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1076-project-employees-ii/</guid>
      <description>LC 1076 Project Employees II Write an SQL query that reports all the projects that have the most employees. The query result format is in the following example: Project table: +-------------+-------------+ | project_id | employee_id | +-------------+-------------+ | 1 | 1 | | 1 | 2 | | 1 | 3 | | 2 | 1 | | 2 | 4 | +-------------+-------------+ Result table: +-------------+ | project_id | +-------------+</description>
    </item>
    
    <item>
      <title>619 Biggest Single Number</title>
      <link>https://foxisawesome.github.io/posts/619-biggest-single-number/</link>
      <pubDate>Mon, 19 Oct 2020 15:04:59 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/619-biggest-single-number/</guid>
      <description>LC 619 Biggest Single Number   Table my_numbers contains many numbers in column num including duplicated ones. Can you write a SQL query to find the biggest number, which only appears once
 Solution 2020-10-19 Notes: # 1 SELECT MAX(a.num) AS num FROM ( SELECT num FROM my_numbers GROUP BY num HAVING COUNT(num) = 1 ) a #2 SELECT MAX(num) AS num FROM ( SELECT *, COUNT(*) OVER(PARTITION BY num) AS ct FROM my_numbers ) a WHERE ct = 1  </description>
    </item>
    
    <item>
      <title>196 Delete Duplicate Emails</title>
      <link>https://foxisawesome.github.io/posts/196-delete-duplicate-emails/</link>
      <pubDate>Mon, 19 Oct 2020 14:53:47 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/196-delete-duplicate-emails/</guid>
      <description>LC 196 Delete Duplicate Emails   Write a SQL query to delete all duplicate email entries in a table named Person, keeping only unique emails based on its smallest Id.
+----+------------------+ | Id | Email | +----+------------------+ | 1 | john@example.com | | 2 | bob@example.com | | 3 | john@example.com | +----+------------------+ Id is the primary key column for this table.  For example, after running your query, the above Person table should have the following rows:</description>
    </item>
    
    <item>
      <title>597 Friend Requests I Overall Acceptance Rate</title>
      <link>https://foxisawesome.github.io/posts/597-friend-requests-i-overall-acceptance-rate/</link>
      <pubDate>Mon, 19 Oct 2020 14:49:05 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/597-friend-requests-i-overall-acceptance-rate/</guid>
      <description>LC 597 Friend Requests I Overall Acceptance Rate   Write a query to find the overall acceptance rate of requests rounded to 2 decimals, which is the number of acceptance divide the number of requests.
 Solution 2020-10-19 Notes: SELECT round(ifnull( (select count(*) from (select distinct requester_id, accepter_id from request_accepted) a) / (select count(*) from (select distinct sender_id, send_to_id from friend_request) b) ,0),2) as accept_rate  </description>
    </item>
    
    <item>
      <title>584 Find Customer Referee</title>
      <link>https://foxisawesome.github.io/posts/584-find-customer-referee/</link>
      <pubDate>Mon, 19 Oct 2020 14:44:34 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/584-find-customer-referee/</guid>
      <description>LC 584 Find Customer Referee   Write a query to return the list of customers NOT referred by the person with id &amp;lsquo;2&amp;rsquo;.
 Solution 2020-10-19 Notes: SELECT name FROM customer WHERE referee_id != &#39;2&#39; OR referee_id IS NULL  </description>
    </item>
    
    <item>
      <title>1148 Article Views I</title>
      <link>https://foxisawesome.github.io/posts/1148-article-views-i/</link>
      <pubDate>Mon, 19 Oct 2020 14:41:54 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1148-article-views-i/</guid>
      <description>LC 1148 Article Views I Write an SQL query to find all the authors that viewed at least one of their own articles, sorted in ascending order by their id. The query result format is in the following example: Views table: +------------+-----------+-----------+------------+ | article_id | author_id | viewer_id | view_date | +------------+-----------+-----------+------------+ | 1 | 3 | 5 | 2019-08-01 | | 1 | 3 | 6 | 2019-08-02 |</description>
    </item>
    
    <item>
      <title>1050 Actors and Directors Who Cooperated at Least Three Times</title>
      <link>https://foxisawesome.github.io/posts/1050-actors-and-directors-who-cooperated-at-least-three-times/</link>
      <pubDate>Mon, 19 Oct 2020 14:39:31 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1050-actors-and-directors-who-cooperated-at-least-three-times/</guid>
      <description>LC 1050 Actors and Directors Who Cooperated at Least Three Times Write a SQL query for a report that provides the pairs (actor_id, director_id) where the actor have cooperated with the director at least 3 times. ActorDirector table: +-------------+-------------+-------------+ | actor_id | director_id | timestamp | +-------------+-------------+-------------+ | 1 | 1 | 0 | | 1 | 1 | 1 | | 1 | 1 | 2 | | 1</description>
    </item>
    
    <item>
      <title>183 Customers Who Never Order</title>
      <link>https://foxisawesome.github.io/posts/183-customers-who-never-order/</link>
      <pubDate>Mon, 19 Oct 2020 14:34:11 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/183-customers-who-never-order/</guid>
      <description>LC 183 Customers Who Never Order Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything. Solution 2020-10-19 Notes: 秒了 SELECT name AS customers FROM customers WHERE id NOT IN (SELECT customerID FROM orders)</description>
    </item>
    
    <item>
      <title>512 Game Play Analysis II</title>
      <link>https://foxisawesome.github.io/posts/512-game-play-analysis-ii/</link>
      <pubDate>Mon, 19 Oct 2020 14:31:42 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/512-game-play-analysis-ii/</guid>
      <description>LC 512 Game Play Analysis II Write a SQL query that reports the device that is first logged in for each player. The query result format is in the following example: Activity table: +-----------+-----------+------------+--------------+ | player_id | device_id | event_date | games_played | +-----------+-----------+------------+--------------+ | 1 | 2 | 2016-03-01 | 5 | | 1 | 2 | 2016-05-02 | 6 | | 2 | 3 | 2017-06-25 | 1</description>
    </item>
    
    <item>
      <title>1290 Convert Binary Number in a Linked List to Integer</title>
      <link>https://foxisawesome.github.io/posts/1290-convert-binary-number-in-a-linked-list-to-integer/</link>
      <pubDate>Mon, 19 Oct 2020 13:55:44 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1290-convert-binary-number-in-a-linked-list-to-integer/</guid>
      <description>LC 1290 Convert Binary Number in a Linked List to Integer Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number. Return the decimal value of the number in the linked list. Input: head = [1,0,1] Output: 5 Explanation: (101) in base 2 = (5)</description>
    </item>
    
    <item>
      <title>1086 High Five</title>
      <link>https://foxisawesome.github.io/posts/1086-high-five/</link>
      <pubDate>Mon, 19 Oct 2020 13:49:24 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1086-high-five/</guid>
      <description>LC 1086 High Five Given a list of scores of different students, return the average score of each student&amp;rsquo;s top five scores in the order of each student&amp;rsquo;s id. Each entry items[i] has items[i][0] the student&amp;rsquo;s id, and items[i][1] the student&amp;rsquo;s score. The average score is calculated using integer division. Solution 2020-10-19 Notes: 秒了 class Solution: def highFive(self, items: List[List[int]]) -&amp;gt; List[List[int]]: d = collections.defaultdict(list) for i in items:</description>
    </item>
    
    <item>
      <title>1252 Cells With Odd Values in a Matrix</title>
      <link>https://foxisawesome.github.io/posts/1252-cells-with-odd-values-in-a-matrix/</link>
      <pubDate>Mon, 19 Oct 2020 13:36:39 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1252-cells-with-odd-values-in-a-matrix/</guid>
      <description>LC 1252 Cells With Odd Values in a Matrix Given n and m which are the dimensions of a matrix initialized by zeros and given an array indices where indices[i] = [ri, ci]. For each pair of [ri, ci] you have to increment all cells in row ri and column ci by 1. Return the number of cells with odd values in the matrix after applying the increment to all</description>
    </item>
    
    <item>
      <title>1021 Remove Outermost Parentheses</title>
      <link>https://foxisawesome.github.io/posts/1021-remove-outermost-parentheses/</link>
      <pubDate>Mon, 19 Oct 2020 13:17:36 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1021-remove-outermost-parentheses/</guid>
      <description>LC 1021 Remove Outermost Parentheses A valid parentheses string is either empty (&amp;quot;&amp;quot;), &amp;quot;(&amp;quot; + A + &amp;quot;)&amp;quot;, or A + B, where A and B are valid parentheses strings, and + represents string concatenation. For example, &amp;quot;&amp;quot;, &amp;quot;()&amp;quot;, &amp;quot;(())()&amp;quot;, and &amp;quot;(()(()))&amp;quot; are all valid parentheses strings. A valid parentheses string S is primitive if it is nonempty, and there does not exist a way to split it into S</description>
    </item>
    
    <item>
      <title>1322 Ads Performance</title>
      <link>https://foxisawesome.github.io/posts/1322-ads-performance/</link>
      <pubDate>Sun, 18 Oct 2020 20:43:41 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1322-ads-performance/</guid>
      <description>LC 1322 Ads Performance Write an SQL query to find the ctr of each Ad. Round ctr to 2 decimal points. Order the result table by ctr in descending order and by ad_id in ascending order in case of a tie. The query result format is in the following example: Ads table: +-------+---------+---------+ | ad_id | user_id | action | +-------+---------+---------+ | 1 | 1 | Clicked | | 2</description>
    </item>
    
    <item>
      <title>1543 Fix Product Name Format</title>
      <link>https://foxisawesome.github.io/posts/1543-fix-product-name-format/</link>
      <pubDate>Sun, 18 Oct 2020 20:34:36 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1543-fix-product-name-format/</guid>
      <description>LC 1543 Fix Product Name Format Write an SQL query to report product_name in lowercase without leading or trailing white spaces. sale_date in the format (&#39;YYYY-MM&#39;) total the number of times the product was sold in this month. Return the result table ordered by product_name in ascending order, in case of a tie order it by sale_date in ascending order. The query result format is in the following example. Sales</description>
    </item>
    
    <item>
      <title>607 Sales Person</title>
      <link>https://foxisawesome.github.io/posts/607-sales-person/</link>
      <pubDate>Sun, 18 Oct 2020 20:33:03 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/607-sales-person/</guid>
      <description>LC 607 Sales Person Given three tables: salesperson, company, orders. Output all the names in the table salesperson, who didn’t have sales to company &amp;lsquo;RED&amp;rsquo;. Solution 2020-10-18 Notes: 秒了 SELECT DISTINCT name FROM salesperson WHERE sales_id NOT IN (SELECT sales_id FROM orders WHERE com_id IN (SELECT com_id FROM company WHERE name=&#39;RED&#39;))</description>
    </item>
    
  </channel>
</rss>
