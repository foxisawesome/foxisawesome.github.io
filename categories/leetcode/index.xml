<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on Fox&#39;s Place</title>
    <link>https://foxisawesome.github.io/categories/leetcode/</link>
    <description>Recent content in leetcode on Fox&#39;s Place</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Aug 2020 21:15:57 -0400</lastBuildDate>
    
	<atom:link href="https://foxisawesome.github.io/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>206. Reverse Linked List</title>
      <link>https://foxisawesome.github.io/posts/2020-08-29-206-reverse-linked-list/</link>
      <pubDate>Sat, 29 Aug 2020 21:15:57 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/2020-08-29-206-reverse-linked-list/</guid>
      <description>https://leetcode.com/problems/reverse-linked-list/
 Reverse a singly linked list.
Example:
Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL  class Solution: def reverseList_iter(self, head: ListNode) -&amp;gt; ListNode: if not head: return None curr = head rev = None while curr: temp = curr.next curr.next = rev rev = curr curr = temp # return rev return ListNode.printListNode(rev) def reverseList_rec(self, head: ListNode) -&amp;gt; ListNode: if not head or not head.next: return head p = self.reverseList(head.next) head.next.next = head head.</description>
    </item>
    
    <item>
      <title>82 Remove dups from sorted list</title>
      <link>https://foxisawesome.github.io/posts/2020-08-29-82-remove-duplicates-from-sorted-list-ii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/2020-08-29-82-remove-duplicates-from-sorted-list-ii/</guid>
      <description>https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/
class Solution: def deleteDuplicates(self, head: ListNode) -&amp;gt; ListNode: import collections if not head: return root = ListNode(0) root.next = head stat = [] while head: stat.append(head.val) head = head.next counter = collections.Counter(stat) head = root while head and head.next: if counter[head.next.val] != 1: head.next = head.next.next else: head = head.next # return root.next return ListNode.printListNode(root.next) so = Solution() indata = [1,1,2,3,3,3,4,4,5,6] head = ListNode.list2ListNode(indata) so.deleteDuplicates(head) 2020-08-29:
 感觉还有更好的解法，二刷再说吧  </description>
    </item>
    
  </channel>
</rss>