<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Categories on Q. Weng</title>
    <link>https://foxisawesome.github.io/categories/</link>
    <description>Recent content in Categories on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 16 Oct 2020 09:29:59 -0400</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/categories/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>113 Path Sum II</title>
      <link>https://foxisawesome.github.io/posts/113-path-sum-ii/</link>
      <pubDate>Sun, 04 Oct 2020 15:04:33 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/113-path-sum-ii/</guid>
      <description>LC 113 Path Sum II Given a binary tree and a sum, find all root-to-leaf paths where each path&amp;rsquo;s sum equals the given sum. Given the below binary tree and sum = 22, 5 / \ 4 8 / / \ 11 13 4 / \ / \ 7 2 5 1 Return: [ [5,4,11,2], [5,8,4,5] ] Solution 2020-10-04 Notes: 很明显的dfs题。但</description>
    </item>
    
    <item>
      <title>114 Flatten Binary Tree to Linked List</title>
      <link>https://foxisawesome.github.io/posts/114-flatten-binary-tree-to-linked-list/</link>
      <pubDate>Sun, 04 Oct 2020 10:58:04 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/114-flatten-binary-tree-to-linked-list/</guid>
      <description>LC 114 Flatten Binary Tree to Linked List Given a binary tree, flatten it to a linked list in-place. For example, given the following tree: 1 / \ 2 5 / \ \ 3 4 6 The flattened tree should look like: 1 \ 2 \ 3 \ 4 \ 5 \ 6 Solution 2020-10-04 Notes: 感觉这题是 tree 真正体会recu</description>
    </item>
    
    <item>
      <title>1596 the Most Frequently Ordered Products for Each Customer</title>
      <link>https://foxisawesome.github.io/sql/1596-the-most-frequently-ordered-products-for-each-customer/</link>
      <pubDate>Sat, 03 Oct 2020 19:53:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1596-the-most-frequently-ordered-products-for-each-customer/</guid>
      <description>LC 1596 the Most Frequently Ordered Products for Each Customer Write an SQL query to find the most frequently ordered product(s) for each customer. The result table should have the product_id and product_name for each customer_id who ordered at least one order. Return the result table in any order. The query result format is in the following example: Orders +----------+------------+-------------+------------+ | order_id | order_date | customer_id | product_id | +----------+------------+-------------+------------+</description>
    </item>
    
    <item>
      <title>1571 Warehouse Manager</title>
      <link>https://foxisawesome.github.io/sql/1571-warehouse-manager/</link>
      <pubDate>Sat, 03 Oct 2020 19:39:07 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1571-warehouse-manager/</guid>
      <description>LC 1571 Warehouse Manager   Write an SQL query to report, How much cubic feet of volume does the inventory occupy in each warehouse.
 warehouse_name volume  Return the result table in any order.
Warehouse table: +------------+--------------+-------------+ | name | product_id | units | +------------+--------------+-------------+ | LCHouse1 | 1 | 1 | | LCHouse1 | 2 | 10 | | LCHouse1 | 3 | 5 | | LCHouse2 | 1 | 2 | | LCHouse2 | 2 | 2 | | LCHouse3 | 4 | 1 | +------------+--------------+-------------+ Products table: +------------+--------------+------------+----------+-----------+ | product_id | product_name | Width | Length | Height | +------------+--------------+------------+----------+-----------+ | 1 | LC-TV | 5 | 50 | 40 | | 2 | LC-KeyChain | 5 | 5 | 5 | | 3 | LC-Phone | 2 | 10 | 10 | | 4 | LC-T-Shirt | 4 | 10 | 20 | +------------+--------------+------------+----------+-----------+ Result table: +----------------+------------+ | warehouse_name | volume | +----------------+------------+ | LCHouse1 | 12250 | | LCHouse2 | 20250 | | LCHouse3 | 800 | +----------------+------------+ Volume of product_id = 1 (LC-TV), 5x50x40 = 10000 Volume of product_id = 2 (LC-KeyChain), 5x5x5 = 125 Volume of product_id = 3 (LC-Phone), 2x10x10 = 200 Volume of product_id = 4 (LC-T-Shirt), 4x10x20 = 800 LCHouse1: 1 unit of LC-TV + 10 units of LC-KeyChain + 5 units of LC-Phone.</description>
    </item>
    
    <item>
      <title>1241 Number of Comments per Post</title>
      <link>https://foxisawesome.github.io/sql/1241-number-of-comments-per-post/</link>
      <pubDate>Sat, 03 Oct 2020 19:19:08 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1241-number-of-comments-per-post/</guid>
      <description>LC 1241 Number of Comments per Post Write an SQL query to find number of comments per each post. Result table should contain post_id and its corresponding number_of_comments, and must be sorted by post_id in ascending order. Submissions may contain duplicate comments. You should count the number of unique comments per post. Submissions may contain duplicate posts. You should treat them as one post. The query result format is in</description>
    </item>
    
    <item>
      <title>1084 Sales Analysis Iii</title>
      <link>https://foxisawesome.github.io/sql/1084-sales-analysis-iii/</link>
      <pubDate>Sat, 03 Oct 2020 18:58:45 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1084-sales-analysis-iii/</guid>
      <description>LC 1084 Sales Analysis Iii Write an SQL query that reports the products that were only sold in spring 2019. That is, between 2019-01-01 and 2019-03-31 inclusive. The query result format is in the following example: Product table: +------------+--------------+------------+ | product_id | product_name | unit_price | +------------+--------------+------------+ | 1 | S8 | 1000 | | 2 | G4 | 800 | | 3 | iPhone | 1400 | +------------+--------------+------------+ Sales</description>
    </item>
    
    <item>
      <title>1142 User Activity for the Past 30 Days II</title>
      <link>https://foxisawesome.github.io/sql/1142-user-activity-for-the-past-30-days-ii/</link>
      <pubDate>Fri, 02 Oct 2020 15:54:14 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1142-user-activity-for-the-past-30-days-ii/</guid>
      <description>LC 1142 User Activity for the Past 30 Days II Write an SQL query to find the average number of sessions per user for a period of 30 days ending 2019-07-27 inclusively, rounded to 2 decimal places. The sessions we want to count for a user are those with at least one activity in that time period. The query result format is in the following example: Activity table: +---------+------------+---------------+---------------+ |</description>
    </item>
    
    <item>
      <title>1204 Last Person to Fit in the Elevator</title>
      <link>https://foxisawesome.github.io/sql/1204-last-person-to-fit-in-the-elevator/</link>
      <pubDate>Fri, 02 Oct 2020 15:42:32 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1204-last-person-to-fit-in-the-elevator/</guid>
      <description>LC 1204 Last Person to Fit in the Elevator The maximum weight the elevator can hold is 1000. Write an SQL query to find the person_name of the last person who will fit in the elevator without exceeding the weight limit. It is guaranteed that the person who is first in the queue can fit in the elevator. The query result format is in the following example: Queue table +-----------+-------------------+--------+------+</description>
    </item>
    
    <item>
      <title>1164 Product Price at a Given Date</title>
      <link>https://foxisawesome.github.io/sql/1164-product-price-at-a-given-date/</link>
      <pubDate>Fri, 02 Oct 2020 15:36:49 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1164-product-price-at-a-given-date/</guid>
      <description>LC 1164 Product Price at a Given Date Write an SQL query to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10. The query result format is in the following example: Products table: +------------+-----------+-------------+ | product_id | new_price | change_date | +------------+-----------+-------------+ | 1 | 20 | 2019-08-14 | | 2 | 50 | 2019-08-14 | | 1 | 30</description>
    </item>
    
    <item>
      <title>161 One Edit Distance</title>
      <link>https://foxisawesome.github.io/posts/161-one-edit-distance/</link>
      <pubDate>Fri, 02 Oct 2020 14:14:19 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/161-one-edit-distance/</guid>
      <description>LC 161 One Edit Distance Given two strings s and t, return true if they are both one edit distance apart, otherwise return false. A string s is said to be one distance apart from a string t if you can: Insert exactly one character into s to get t. Delete exactly one character from s to get t. Replace exactly one character of s with a different character to</description>
    </item>
    
    <item>
      <title>168 Excel Sheet Column Title</title>
      <link>https://foxisawesome.github.io/posts/168-excel-sheet-column-title/</link>
      <pubDate>Fri, 02 Oct 2020 13:52:16 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/168-excel-sheet-column-title/</guid>
      <description>LC 168 Excel Sheet Column Title Given a positive integer, return its corresponding column title as appear in an Excel sheet. For example: 1 -&amp;gt; A 2 -&amp;gt; B 3 -&amp;gt; C ... 26 -&amp;gt; Z 27 -&amp;gt; AA 28 -&amp;gt; AB ... Input: 28 Output: &amp;quot;AB&amp;quot; Solution 2020-10-02 Notes: dict应该 0-indexed，然后di</description>
    </item>
    
    <item>
      <title>724 Find Pivot Index</title>
      <link>https://foxisawesome.github.io/posts/724-find-pivot-index/</link>
      <pubDate>Fri, 02 Oct 2020 13:38:14 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/724-find-pivot-index/</guid>
      <description>LC 724 Find Pivot Index Given an array of integers nums, write a method that returns the &amp;ldquo;pivot&amp;rdquo; index of this array. We define the pivot index as the index where the sum of all the numbers to the left of the index is equal to the sum of all the numbers to the right of the index. If no such index exists, we should return -1. If there are</description>
    </item>
    
    <item>
      <title>240 Search a 2d Matrix II</title>
      <link>https://foxisawesome.github.io/posts/240-search-a-2d-matrix-ii/</link>
      <pubDate>Fri, 02 Oct 2020 13:14:19 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/240-search-a-2d-matrix-ii/</guid>
      <description>LC 240 Search a 2d Matrix II Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties: Integers in each row are sorted in ascending from left to right. Integers in each column are sorted in ascending from top to bottom. Consider the following matrix: [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9,</description>
    </item>
    
    <item>
      <title>905 Sort Array by Parity</title>
      <link>https://foxisawesome.github.io/posts/905-sort-array-by-parity/</link>
      <pubDate>Fri, 02 Oct 2020 12:54:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/905-sort-array-by-parity/</guid>
      <description>LC 905 Sort Array by Parity Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A. You may return any answer array that satisfies this condition. Input: [3,1,2,4] Output: [2,4,3,1] The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted. Solution 2020-10-02 Notes: 这题和 remove duplicate from array 一回事。</description>
    </item>
    
    <item>
      <title>1213 Intersection of Three Sorted Arrays</title>
      <link>https://foxisawesome.github.io/posts/1213-intersection-of-three-sorted-arrays/</link>
      <pubDate>Fri, 02 Oct 2020 12:46:42 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1213-intersection-of-three-sorted-arrays/</guid>
      <description>LC 1213 Intersection of Three Sorted Arrays Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays. Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8] Output: [1,5] Explanation: Only 1 and 5 appeared in the three arrays. Solution 2020-10-02 Notes: 建一个 helper function 找两个arr</description>
    </item>
    
    <item>
      <title>118 Pascals Triangle</title>
      <link>https://foxisawesome.github.io/posts/118-pascals-triangle/</link>
      <pubDate>Fri, 02 Oct 2020 11:34:43 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/118-pascals-triangle/</guid>
      <description>LC 118 Pascals Triangle Given a non-negative integer numRows, generate the first numRows of Pascal&amp;rsquo;s triangle. Solution 2020-10-02 Notes: 没有特别的。 class Solution: def generate(self, numRows: int) -&amp;gt; List[List[int]]: ans = [[1]*i for i in range(1,numRows+1)] if numRows &amp;gt;= 3: for i in range(2,numRows): for j in range(1,i): ans[i][j] = sum(ans[i-1][j-1:j+1]) return ans # Time O(N) # Space O(N)</description>
    </item>
    
    <item>
      <title>8 String to Integer Atoi</title>
      <link>https://foxisawesome.github.io/posts/8-string-to-integer-atoi/</link>
      <pubDate>Fri, 02 Oct 2020 11:08:37 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/8-string-to-integer-atoi/</guid>
      <description>LC 8 String to Integer Atoi Implement atoi which converts a string to an integer. The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value. The string can contain additional characters after those that form</description>
    </item>
    
    <item>
      <title>67 Add Binary</title>
      <link>https://foxisawesome.github.io/posts/67-add-binary/</link>
      <pubDate>Thu, 01 Oct 2020 19:23:49 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/67-add-binary/</guid>
      <description>LC 67 Add Binary Given two binary strings, return their sum (also a binary string). The input strings are both non-empty and contains only characters 1 or 0. Input: a = &amp;quot;11&amp;quot;, b = &amp;quot;1&amp;quot; Output: &amp;quot;100&amp;quot; Solution 2020-10-01 Notes: 这题不像linked list的加法，得分两个loop，一个l</description>
    </item>
    
    <item>
      <title>66 Plus One</title>
      <link>https://foxisawesome.github.io/posts/66-plus-one/</link>
      <pubDate>Thu, 01 Oct 2020 16:14:59 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/66-plus-one/</guid>
      <description>LC 66 Plus One Given a non-empty array of digits representing a non-negative integer, increment one to the integer. The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit. You may assume the integer does not contain any leading zero, except the number 0 itself. Solution 2020-10-01 Notes: 简单题，走</description>
    </item>
    
    <item>
      <title>463 Island Perimeter</title>
      <link>https://foxisawesome.github.io/posts/463-island-perimeter/</link>
      <pubDate>Thu, 01 Oct 2020 16:01:57 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/463-island-perimeter/</guid>
      <description>LC 463 Island Perimeter You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn&amp;rsquo;t have &amp;ldquo;lakes&amp;rdquo;, meaning the water inside isn&amp;rsquo;t connected to the water around the island.</description>
    </item>
    
  </channel>
</rss>
