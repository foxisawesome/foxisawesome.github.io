<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sqls on Q. Weng</title>
    <link>https://foxisawesome.github.io/sql/</link>
    <description>Recent content in Sqls on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 20 Sep 2020 19:00:41 -0400</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>178 Rank Scores</title>
      <link>https://foxisawesome.github.io/sql/178-rank-scores/</link>
      <pubDate>Thu, 10 Sep 2020 21:57:47 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/178-rank-scores/</guid>
      <description>LC 178 Rank Scores Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no &amp;ldquo;holes&amp;rdquo; between ranks. +----+-------+ | Id | Score | +----+-------+ | 1 | 3.50 | | 2 | 3.65 | | 3</description>
    </item>
    
    <item>
      <title>312 Burst Balloons</title>
      <link>https://foxisawesome.github.io/posts/312-burst-balloons/</link>
      <pubDate>Thu, 10 Sep 2020 20:58:53 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/312-burst-balloons/</guid>
      <description>LC 312 Burst Balloons Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent. Find the maximum</description>
    </item>
    
    <item>
      <title>110 Balanced Binary Tree</title>
      <link>https://foxisawesome.github.io/posts/110-balanced-binary-tree/</link>
      <pubDate>Thu, 10 Sep 2020 16:09:25 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/110-balanced-binary-tree/</guid>
      <description>LC 110 Balanced Binary Tree Given a binary tree, determine if it is height-balanced. For this problem, a height-balanced binary tree is defined as: a binary tree in which the left and right subtrees of every node differ in height by no more than 1. Given the following tree [3,9,20,null,null,15,7]:Return true. 3 / \ 9 20 / \ 15 7 Given the following tree [1,2,2,3,3,null,null,4,4]:Return false. 1 / \ 2</description>
    </item>
    
    <item>
      <title>951 Flip Equivalent Binary Trees</title>
      <link>https://foxisawesome.github.io/posts/951-flip-equivalent-binary-trees/</link>
      <pubDate>Thu, 10 Sep 2020 14:32:04 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/951-flip-equivalent-binary-trees/</guid>
      <description>LC 951 Flip Equivalent Binary Trees   For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.
A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.
Given the roots of two binary trees root1 and root2, return true if the two trees are flip equivelent or false otherwise.</description>
    </item>
    
    <item>
      <title>101 Symmetric Tree</title>
      <link>https://foxisawesome.github.io/posts/101-symmetric-tree/</link>
      <pubDate>Thu, 10 Sep 2020 09:26:44 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/101-symmetric-tree/</guid>
      <description>LC 101 Symmetric Tree   Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
 1 / \ 2 2 / \ / \ 3 4 4 3  But the following [1,2,2,null,3,null,3] is not:
 1 / \ 2 2 \ \ 3 3   Solution 2020-09-10 Notes:
 recursion is pretty standard in this case.</description>
    </item>
    
    <item>
      <title>100 Same Tree</title>
      <link>https://foxisawesome.github.io/posts/100-same-tree/</link>
      <pubDate>Wed, 09 Sep 2020 22:18:03 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/100-same-tree/</guid>
      <description>LC 100 Same Tree Given two binary trees, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical and the nodes have the same value. Solution 2020-09-09 Notes: Two roots 的pattern 和 single root一样。Tree 刷的略有感</description>
    </item>
    
    <item>
      <title>112 Path Sum</title>
      <link>https://foxisawesome.github.io/posts/112-path-sum/</link>
      <pubDate>Wed, 09 Sep 2020 21:47:10 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/112-path-sum/</guid>
      <description>LC 112 Path Sum Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum. Given the below binary tree and sum = 22, 5 / \ 4 8 / / \ 11 13 4 / \ \ 7 2 1 return true, as there exist a root-to-leaf path 5-&amp;gt;4-&amp;gt;11-&amp;gt;2 which sum</description>
    </item>
    
    <item>
      <title>104 Maximum Depth of Binary Tree</title>
      <link>https://foxisawesome.github.io/posts/104-maximum-depth-of-binary-tree/</link>
      <pubDate>Wed, 09 Sep 2020 21:45:11 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/104-maximum-depth-of-binary-tree/</guid>
      <description>LC 104 Maximum Depth of Binary Tree Given a binary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Given binary tree [3,9,20,null,null,15,7], 3 / \ 9 20 / \ 15 7 Solution 2020-09-09 Notes: 注意patterns. Beat the TREE! # Definition for</description>
    </item>
    
    <item>
      <title>111 Minimum Depth of Binary Tree</title>
      <link>https://foxisawesome.github.io/posts/111-minimum-depth-of-binary-tree/</link>
      <pubDate>Wed, 09 Sep 2020 21:41:11 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/111-minimum-depth-of-binary-tree/</guid>
      <description>LC 111 Minimum Depth of Binary Tree   Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
Given binary tree [3,9,20,null,null,15,7],
 3 / \ 9 20 / \ 15 7  return 2
 Solution 2020-09-09 Notes:
 Beat the TREE!  # Definition for a binary tree node.</description>
    </item>
    
    <item>
      <title>124 Binary Tree Maximum Path Sum</title>
      <link>https://foxisawesome.github.io/posts/124-binary-tree-maximum-path-sum/</link>
      <pubDate>Wed, 09 Sep 2020 14:41:35 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/124-binary-tree-maximum-path-sum/</guid>
      <description>LC 124 Binary Tree Maximum Path Sum Given a non-empty binary tree, find the maximum path sum. For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root. Input: [-10,9,20,null,null,15,7] -10 / \ 9 20 / \ 15</description>
    </item>
    
    <item>
      <title>236 Lowest Common Ancestor of a Binary Tree</title>
      <link>https://foxisawesome.github.io/posts/236-lowest-common-ancestor-of-a-binary-tree/</link>
      <pubDate>Wed, 09 Sep 2020 13:57:55 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/236-lowest-common-ancestor-of-a-binary-tree/</guid>
      <description>LC 236 Lowest Common Ancestor of a Binary Tree Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be</description>
    </item>
    
    <item>
      <title>392 Is Subsequence</title>
      <link>https://foxisawesome.github.io/posts/392-is-subsequence/</link>
      <pubDate>Tue, 08 Sep 2020 22:19:55 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/392-is-subsequence/</guid>
      <description>LC 392 Is Subsequence   Given a string s and a string t, check if s is subsequence of t.
A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, &amp;quot;ace&amp;quot; is a subsequence of &amp;quot;abcde&amp;quot; while &amp;quot;aec&amp;quot; is not).
 Solution 2020-09-08 Notes:  O(N) is easy.</description>
    </item>
    
    <item>
      <title>268 Missing Number</title>
      <link>https://foxisawesome.github.io/posts/268-missing-number/</link>
      <pubDate>Tue, 08 Sep 2020 21:54:19 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/268-missing-number/</guid>
      <description>LC 268 Missing Number   Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.
 Solution 2020-09-08 Notes:
 Calculate it directly.  class Solution: def missingNumber(self, nums: List[int]) -&amp;gt; int: n = len(nums) return n*(n+1)//2 - sum(nums) # Time O(1) # Space O(1)  </description>
    </item>
    
    <item>
      <title>645 Set Mismatch</title>
      <link>https://foxisawesome.github.io/posts/645-set-mismatch/</link>
      <pubDate>Tue, 08 Sep 2020 21:25:19 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/645-set-mismatch/</guid>
      <description>LC 645 Set Mismatch The set S originally contains numbers from 1 to n. But unfortunately, due to the data error, one of the numbers in the set got duplicated to another number in the set, which results in repetition of one number and loss of another number. Given an array nums representing the data status of this set after the error. Your task is to firstly find the number</description>
    </item>
    
    <item>
      <title>234 Palindrome Linked List</title>
      <link>https://foxisawesome.github.io/posts/234-palindrome-linked-list/</link>
      <pubDate>Tue, 08 Sep 2020 20:54:03 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/234-palindrome-linked-list/</guid>
      <description>LC 234 Palindrome Linked List Given a singly linked list, determine if it is a palindrome. Solution 2020-09-08 Notes: Recursion solution参考了 labuladong 以下是一种比较直观但是不是optimal的解法 line 13 is a post-order traverse. # Definition for singly-linked list. # class ListNode: #</description>
    </item>
    
    <item>
      <title>ML Kmeans Algo Sample</title>
      <link>https://foxisawesome.github.io/posts/ml-kmeans/</link>
      <pubDate>Tue, 08 Sep 2020 18:41:56 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/ml-kmeans/</guid>
      <description>Summary:
  it minimizes “within” cluster distance or equivalently maximizes “in between” cluster distance/variance.
  K-means algorithm is closely ralated to E-M algorithm
E-M (Expectation-Maximization) algorithm is a “soft” version of K-means
  Algorithm intuition (see example implemented in numpy below ):
  Pre-set $K$: use elbow plot: loss vs $K$ to determine K or use automatic: gap statistics method to determine $K$.
  Randomly assign initial cluster centroid $k$.</description>
    </item>
    
    <item>
      <title>325 Maximum Size Subarray Sum Equals K</title>
      <link>https://foxisawesome.github.io/posts/325-maximum-size-subarray-sum-equals-k/</link>
      <pubDate>Tue, 08 Sep 2020 17:08:48 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/325-maximum-size-subarray-sum-equals-k/</guid>
      <description>LC 325 Maximum Size Subarray Sum Equals K Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn&amp;rsquo;t one, return 0 instead. Input: nums = [1, -1, 5, -2, 3], k = 3 Output: 4 Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest. Solution 2020-09-08 Notes: 此题解法跟</description>
    </item>
    
    <item>
      <title>560 Subarray Sum Equals K</title>
      <link>https://foxisawesome.github.io/posts/560-subarray-sum-equals-k/</link>
      <pubDate>Tue, 08 Sep 2020 15:07:27 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/560-subarray-sum-equals-k/</guid>
      <description>LC 560 Subarray Sum Equals K Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k. Input:nums = [1,1,1], k = 2 Output: 2 Solution 2020-09-08 Notes: 看了labuladong 的总结 预先算一个cumulativ</description>
    </item>
    
    <item>
      <title>1109 Corporate Flight Bookings</title>
      <link>https://foxisawesome.github.io/posts/1109-corporate-flight-bookings/</link>
      <pubDate>Tue, 08 Sep 2020 13:44:08 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1109-corporate-flight-bookings/</guid>
      <description>LC 1109 Corporate Flight Bookings There are n flights, and they are labeled from 1 to n. We have a list of flight bookings. The i-th booking bookings[i] = [i, j, k] means that we booked k seats from flights labeled i to j inclusive. Return an array answer of length n, representing the number of seats booked on each flight in order of their label. Input: bookings = [[1,2,10],[2,3,20],[2,5,25]],</description>
    </item>
    
    <item>
      <title>1539 Kth Missing Positive Number</title>
      <link>https://foxisawesome.github.io/posts/1539-kth-missing-positive-number/</link>
      <pubDate>Mon, 07 Sep 2020 22:03:58 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1539-kth-missing-positive-number/</guid>
      <description>LC 1539 Kth Missing Positive Number Given an array arr of positive integers sorted in a strictly increasing order, and an integer k. Find the kth positive integer that is missing from this array. Input: arr = [2,3,4,7,11], k = 5 Output: 9 Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9. Solution 2020-09-07 Notes: O(N) solution is pretty easy, but not optimal. the binary</description>
    </item>
    
  </channel>
</rss>
