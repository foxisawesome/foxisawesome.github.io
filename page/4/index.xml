<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Q. Weng</title>
    <link>https://foxisawesome.github.io/</link>
    <description>Recent content on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 05 Sep 2020 22:05:28 -0400</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>530 Min Abs Dif BST</title>
      <link>https://foxisawesome.github.io/530-min-abs-dif-bst/</link>
      <pubDate>Sun, 30 Aug 2020 20:59:36 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/530-min-abs-dif-bst/</guid>
      <description>LC 530
Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.
 Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.
Example:
Input: 1 \ 3 / 2 Output: 1 Explanation: The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).   8/30/2020 Note:</description>
    </item>
    
    <item>
      <title>98 Valid BST</title>
      <link>https://foxisawesome.github.io/98-valid-bst/</link>
      <pubDate>Sun, 30 Aug 2020 20:59:02 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/98-valid-bst/</guid>
      <description>LC 98 Given a binary tree, determine if it is a valid binary search tree (BST). Assume a BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node&amp;rsquo;s key. The right subtree of a node contains only nodes with keys greater than the node&amp;rsquo;s key. Both the left and right subtrees must also be binary search trees. Example 1: 2</description>
    </item>
    
    <item>
      <title>701 Insert Into BST</title>
      <link>https://foxisawesome.github.io/701-insert-into-bst/</link>
      <pubDate>Sun, 30 Aug 2020 20:58:29 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/701-insert-into-bst/</guid>
      <description>LC 701 Given the root node of a binary search tree (BST) and a value to be inserted into the tree, insert the value into the BST. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST. Note that there may exist multiple valid ways for the insertion, as long as the tree remains a BST</description>
    </item>
    
    <item>
      <title>Sliding Window</title>
      <link>https://foxisawesome.github.io/sliding-window/</link>
      <pubDate>Sun, 30 Aug 2020 17:08:55 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sliding-window/</guid>
      <description>滑动窗口算法的思路是这样： 1、我们在字符串S中使用双指针中的左右指针技巧，初始化left = right = 0，把索引左闭右开区间[left, right)</description>
    </item>
    
    <item>
      <title>First Post Linked List</title>
      <link>https://foxisawesome.github.io/first-post-linked-list/</link>
      <pubDate>Sun, 30 Aug 2020 16:54:06 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/first-post-linked-list/</guid>
      <description>开始刷Leetcode 好几个月了，今天开始学很多人用blog 记录下自己的notes，也激励自己好好刷题！First post! It takes a while for me to get how exactly Linked List</description>
    </item>
    
    <item>
      <title>42 Trapping Rain Water</title>
      <link>https://foxisawesome.github.io/42-trapping-rain-water/</link>
      <pubDate>Wed, 05 Aug 2020 14:01:29 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/42-trapping-rain-water/</guid>
      <description>LC 42 Trapping Rain Water Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. Solution 2020-08-05 Notes: 短边原理，左右指针同时走，r_max 大时短边在left，所以计算lef</description>
    </item>
    
    <item>
      <title>206 Reverse Linked List</title>
      <link>https://foxisawesome.github.io/206-reverse-linked-list/</link>
      <pubDate>Sat, 01 Aug 2020 20:06:27 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/206-reverse-linked-list/</guid>
      <description>LC 206 Reverse Linked List Reverse a singly linked list. Example: Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL Solution 2020-09-01 Notes: 这题刷了不下10遍了，终于明白iteration这里的四步操作了。 recursion的做法还是似懂非懂，</description>
    </item>
    
    <item>
      <title>2 Add Two Num</title>
      <link>https://foxisawesome.github.io/2-add-two-num/</link>
      <pubDate>Thu, 02 Jul 2020 10:08:20 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/2-add-two-num/</guid>
      <description>LC 2 Add Two Num You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Example: Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt;</description>
    </item>
    
    <item>
      <title>1 Two Sum</title>
      <link>https://foxisawesome.github.io/1-two-sum/</link>
      <pubDate>Sat, 01 Feb 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/1-two-sum/</guid>
      <description>LC 1 Two Sum   Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have *exactly* one solution, and you may not use the same element twice.
 Solution 2020-02-01 Notes:
 use hash table, one-pass.  class Solution: def twoSum(self, nums: List[int], target: int) -&amp;gt; List[int]: if not nums or target is None: return [] d = dict() for i, val in enumerate(nums): if target - val not in d: d[val] = i else: return [d[target - val], i] # Time O(N) # Space O(N)  </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://foxisawesome.github.io/about/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://foxisawesome.github.io/about/</guid>
      <description>Dr. Q. Weng   Github
  Email: Fox.Weng@me.com
  Research and Interests Data Analysis Probability and Statistics • Bayesian Analysis • Machine Learning • Time Series Analysis • Natural Language Processing • Visualization.
Others Knowledge Sharing • Data Science • Clean Code
Hobbies Photography • Sports</description>
    </item>
    
  </channel>
</rss>
