<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>monotonic on Q. Weng</title>
    <link>https://foxisawesome.github.io/tags/monotonic/</link>
    <description>Recent content in monotonic on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 21 Oct 2020 14:02:39 -0400</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/tags/monotonic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1197 Minimum Knight Moves</title>
      <link>https://foxisawesome.github.io/posts/algo/1197-minimum-knight-moves/</link>
      <pubDate>Sun, 11 Oct 2020 10:38:01 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/algo/1197-minimum-knight-moves/</guid>
      <description>LC 1197 Minimum Knight Moves In an infinite chess board with coordinates from -infinity to +infinity, you have a knight at square [0, 0]. A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction. Solution 2020-10-11 Notes: 这题最优解是dp 但使用naiv</description>
    </item>
    
    <item>
      <title>835 Image Overlap</title>
      <link>https://foxisawesome.github.io/posts/algo/835-image-overlap/</link>
      <pubDate>Sun, 11 Oct 2020 10:12:32 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/algo/835-image-overlap/</guid>
      <description>LC 835 Image Overlap You are given two images img1 and img2 both of size n x n, represented as binary, square matrices of the same size. (A binary matrix has only 0s and 1s as values.) We translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image. After, the overlap of this translation</description>
    </item>
    
    <item>
      <title>1007 Minimum Domino Rotations for Equal Row</title>
      <link>https://foxisawesome.github.io/posts/algo/1007-minimum-domino-rotations-for-equal-row/</link>
      <pubDate>Fri, 09 Oct 2020 19:35:36 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/algo/1007-minimum-domino-rotations-for-equal-row/</guid>
      <description>LC 1007 Minimum Domino Rotations for Equal Row In a row of dominoes, A[i] and B[i] represent the top and bottom halves of the i-th domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.) We may rotate the i-th domino, so that A[i] and B[i] swap values. Return the minimum number of rotations so that all the values</description>
    </item>
    
    <item>
      <title>1321 Restaurant Growth</title>
      <link>https://foxisawesome.github.io/posts/sql/1321-restaurant-growth/</link>
      <pubDate>Fri, 09 Oct 2020 19:16:19 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/sql/1321-restaurant-growth/</guid>
      <description>LC 1321 Restaurant Growth Write an SQL query to compute moving average of how much customer paid in a 7 days window (current day + 6 days before) . The query result format is in the following example: Return result table ordered by visited_on. average_amount should be rounded to 2 decimal places, all dates are in the format (&amp;lsquo;YYYY-MM-DD&amp;rsquo;). Customer table: +-------------+--------------+--------------+-------------+ | customer_id | name | visited_on | amount</description>
    </item>
    
    <item>
      <title>1107 New Users Daily Count</title>
      <link>https://foxisawesome.github.io/posts/sql/1107-new-users-daily-count/</link>
      <pubDate>Fri, 09 Oct 2020 18:54:37 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/sql/1107-new-users-daily-count/</guid>
      <description>LC 1107 New Users Daily Count   Write an SQL query that reports for every date within at most 90 days from today, the number of users that logged in for the first time on that date. Assume today is 2019-06-30.
The query result format is in the following example:
Traffic table: +---------+----------+---------------+ | user_id | activity | activity_date | +---------+----------+---------------+ | 1 | login | 2019-05-01 | | 1 | homepage | 2019-05-01 | | 1 | logout | 2019-05-01 | | 2 | login | 2019-06-21 | | 2 | logout | 2019-06-21 | | 3 | login | 2019-01-01 | | 3 | jobs | 2019-01-01 | | 3 | logout | 2019-01-01 | | 4 | login | 2019-06-21 | | 4 | groups | 2019-06-21 | | 4 | logout | 2019-06-21 | | 5 | login | 2019-03-01 | | 5 | logout | 2019-03-01 | | 5 | login | 2019-06-21 | | 5 | logout | 2019-06-21 | +---------+----------+---------------+ Result table: +------------+-------------+ | login_date | user_count | +------------+-------------+ | 2019-05-01 | 1 | | 2019-06-21 | 2 | +------------+-------------+   Solution 2020-10-09 Notes: SELECT activity_date AS login_date, COUNT(user_id) AS user_count FROM( SELECT *, ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY activity_date) AS nr FROM traffic WHERE activity = &#39;login&#39; ) a WHERE nr = 1 and DATEDIFF(&#39;2019-06-30&#39;, activity_date) &amp;lt;= 90 GROUP BY 1  </description>
    </item>
    
    <item>
      <title>1484 Group Sold Products by the Date</title>
      <link>https://foxisawesome.github.io/posts/sql/1484-group-sold-products-by-the-date/</link>
      <pubDate>Fri, 09 Oct 2020 18:43:41 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/sql/1484-group-sold-products-by-the-date/</guid>
      <description>LC 1484 Group Sold Products by the Date Write an SQL query to find for each date, the number of distinct products sold and their names. The sold-products names for each date should be sorted lexicographically. Return the result table ordered by sell_date. The query result format is in the following example. Activities table: +------------+-------------+ | sell_date | product | +------------+-------------+ | 2020-05-30 | Headphone | | 2020-06-01 | Pencil</description>
    </item>
    
    <item>
      <title>443 String Compression</title>
      <link>https://foxisawesome.github.io/posts/algo/443-string-compression/</link>
      <pubDate>Fri, 09 Oct 2020 18:33:05 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/algo/443-string-compression/</guid>
      <description>LC 443 String Compression Given an array of characters chars, compress it using the following algorithm: Begin with an empty string s. For each group of consecutive repeating characters in chars: If the group&amp;rsquo;s length is 1, append the character to s. Otherwise, append the character followed by the group&amp;rsquo;s length. The compressed string s should not be returned separately, but instead be stored in the input character array chars.</description>
    </item>
    
    <item>
      <title>13 Roman to Integer</title>
      <link>https://foxisawesome.github.io/posts/algo/13-roman-to-integer/</link>
      <pubDate>Fri, 09 Oct 2020 16:06:38 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/algo/13-roman-to-integer/</guid>
      <description>LC 13 Roman to Integer Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, 2 is written as II in Roman numeral, just two one&amp;rsquo;s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII,</description>
    </item>
    
    <item>
      <title>6 Zigzag Conversion</title>
      <link>https://foxisawesome.github.io/posts/algo/6-zigzag-conversion/</link>
      <pubDate>Fri, 09 Oct 2020 15:50:57 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/algo/6-zigzag-conversion/</guid>
      <description>LC 6 Zigzag Conversion The string &amp;quot;PAYPALISHIRING&amp;quot; is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) P A H N A P L S I I G Y I R And then read line by line: &amp;quot;PAHNAPLSIIGYIR&amp;quot; Write the code that will take a string and make this conversion given a</description>
    </item>
    
    <item>
      <title>347 Top K Frequent Elements</title>
      <link>https://foxisawesome.github.io/posts/algo/347-top-k-frequent-elements/</link>
      <pubDate>Fri, 09 Oct 2020 15:32:40 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/algo/347-top-k-frequent-elements/</guid>
      <description>LC 347 Top K Frequent Elements Given a non-empty array of integers, return the *k* most frequent elements. Input: nums = [1,1,1,2,2,3], k = 2 Output: [1,2] Solution 2020-10-09 Notes: 这题要求 O(NlogN)就能过，那么把counter排下序就好了。 class Solution: def topKFrequent(self, nums: List[int], k:</description>
    </item>
    
    <item>
      <title>127 Word Ladder</title>
      <link>https://foxisawesome.github.io/posts/algo/127-word-ladder/</link>
      <pubDate>Thu, 08 Oct 2020 21:14:34 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/algo/127-word-ladder/</guid>
      <description>LC 127 Word Ladder Given two words (beginWord and endWord), and a dictionary&amp;rsquo;s word list, find the length of shortest transformation sequence from beginWord to endWord, such that: Only one letter can be changed at a time. Each transformed word must exist in the word list. Input: beginWord = &amp;quot;hit&amp;quot;, endWord = &amp;quot;cog&amp;quot;, wordList = [&amp;quot;hot&amp;quot;,&amp;quot;dot&amp;quot;,&amp;quot;dog&amp;quot;,&amp;quot;lot&amp;quot;,&amp;quot;log&amp;quot;,&amp;quot;cog&amp;quot;] Output: 5 Explanation: As one shortest transformation is &amp;quot;hit&amp;quot; -&amp;gt; &amp;quot;hot&amp;quot; -&amp;gt; &amp;quot;dot&amp;quot; -&amp;gt;</description>
    </item>
    
    <item>
      <title>468 Validate Ip Address</title>
      <link>https://foxisawesome.github.io/posts/algo/468-validate-ip-address/</link>
      <pubDate>Thu, 08 Oct 2020 20:03:36 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/algo/468-validate-ip-address/</guid>
      <description>LC 468 Validate Ip Address Given a string IP, return &amp;quot;IPv4&amp;quot; if IP is a valid IPv4 address, &amp;quot;IPv6&amp;quot; if IP is a valid IPv6 address or &amp;quot;Neither&amp;quot; if IP is not a correct IP of any type. A valid IPv4 address is an IP in the form &amp;quot;x1.x2.x3.x4&amp;quot; where 0 &amp;lt;= xi &amp;lt;= 255 and xi cannot contain leading zeros. For example, &amp;quot;192.168.1.1&amp;quot; and &amp;quot;192.168.1.0&amp;quot; are valid IPv4 addresses</description>
    </item>
    
    <item>
      <title>595 Big Countries</title>
      <link>https://foxisawesome.github.io/posts/sql/595-big-countries/</link>
      <pubDate>Thu, 08 Oct 2020 17:00:05 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/sql/595-big-countries/</guid>
      <description>LC 595 Big Countries   A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.
Write a SQL solution to output big countries&#39; name, population and area.
 Solution 2020-10-08 Notes:   #Union solution is actually faster than using #or.
  Why Union is faster than OR?
Strictly speaking, Using UNION is faster when it comes to cases like scan two different column like this</description>
    </item>
    
    <item>
      <title>596 Classes More Than 5 Students</title>
      <link>https://foxisawesome.github.io/posts/sql/596-classes-more-than-5-students/</link>
      <pubDate>Thu, 08 Oct 2020 16:53:20 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/sql/596-classes-more-than-5-students/</guid>
      <description>LC 596 Classes More Than 5 Students   There is a table courses with columns: student and class
Please list out all classes which have more than or equal to 5 students.
 Solution 2020-10-08 Notes: SELECT DISTINCT class FROM ( SELECT *, COUNT(student) OVER(PARTITION BY class) AS ct FROM (SELECT DISTINCT student, class FROM courses) b ) a WHERE ct &amp;gt;= 5  </description>
    </item>
    
    <item>
      <title>1532 the Most Recent Three Orders</title>
      <link>https://foxisawesome.github.io/posts/sql/1532-the-most-recent-three-orders/</link>
      <pubDate>Thu, 08 Oct 2020 16:44:43 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/sql/1532-the-most-recent-three-orders/</guid>
      <description>LC 1532 the Most Recent Three Orders   Write an SQL query to find the most recent 3 orders of each user. If a user ordered less than 3 orders return all of their orders.
Return the result table sorted by customer_name in ascending order and in case of a tie by the customer_id in ascending order. If there still a tie, order them by the order_date in descending order.</description>
    </item>
    
    <item>
      <title>1607 Sellers With No Sales</title>
      <link>https://foxisawesome.github.io/posts/sql/1607-sellers-with-no-sales/</link>
      <pubDate>Thu, 08 Oct 2020 16:39:02 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/sql/1607-sellers-with-no-sales/</guid>
      <description>LC 1607 Sellers With No Sales   Write an SQL query to report the names of all sellers who did not make any sales in 2020.
Return the result table ordered by seller_name in ascending order.
 Solution 2020-10-08 Notes: SELECT DISTINCT seller_name FROM seller WHERE seller_id NOT IN (SELECT seller_id FROM orders WHERE LEFT(sale_date,4)=2020) ORDER BY 1  </description>
    </item>
    
    <item>
      <title>1152 Analyze User Website Visit Pattern</title>
      <link>https://foxisawesome.github.io/posts/algo/1152-analyze-user-website-visit-pattern/</link>
      <pubDate>Thu, 08 Oct 2020 10:33:48 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/algo/1152-analyze-user-website-visit-pattern/</guid>
      <description>LC 1152 Analyze User Website Visit Pattern We are given some website visits: the user with name username[i] visited the website website[i] at time timestamp[i]. A 3-sequence is a list of websites of length 3 sorted in ascending order by the time of their visits. (The websites in a 3-sequence are not necessarily distinct.) Find the 3-sequence visited by the largest number of users. If there is more than one</description>
    </item>
    
    <item>
      <title>1350 Students With Invalid Departments</title>
      <link>https://foxisawesome.github.io/posts/sql/1350-students-with-invalid-departments/</link>
      <pubDate>Wed, 07 Oct 2020 21:36:59 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/sql/1350-students-with-invalid-departments/</guid>
      <description>LC 1350 Students With Invalid Departments   Write an SQL query to find the id and the name of all students who are enrolled in departments that no longer exists.
Return the result table in any order.
The query result format is in the following example:
Departments table: +------+--------------------------+ | id | name | +------+--------------------------+ | 1 | Electrical Engineering | | 7 | Computer Engineering | | 13 | Bussiness Administration | +------+--------------------------+ Students table: +------+----------+---------------+ | id | name | department_id | +------+----------+---------------+ | 23 | Alice | 1 | | 1 | Bob | 7 | | 5 | Jennifer | 13 | | 2 | John | 14 | | 4 | Jasmine | 77 | | 3 | Steve | 74 | | 6 | Luis | 1 | | 8 | Jonathan | 7 | | 7 | Daiana | 33 | | 11 | Madelynn | 1 | +------+----------+---------------+ Result table: +------+----------+ | id | name | +------+----------+ | 2 | John | | 7 | Daiana | | 4 | Jasmine | | 3 | Steve | +------+----------+ John, Daiana, Steve and Jasmine are enrolled in departments 14, 33, 74 and 77 respectively.</description>
    </item>
    
    <item>
      <title>1174 Immediate Food Delivery II</title>
      <link>https://foxisawesome.github.io/posts/sql/1174-immediate-food-delivery-ii/</link>
      <pubDate>Wed, 07 Oct 2020 21:29:20 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/sql/1174-immediate-food-delivery-ii/</guid>
      <description>LC 1174 Immediate Food Delivery II Write an SQL query to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places. The query result format is in the following example: Delivery table: +-------------+-------------+------------+-----------------------------+ | delivery_id | customer_id | order_date | customer_pref_delivery_date | +-------------+-------------+------------+-----------------------------+ | 1 | 1 | 2019-08-01 | 2019-08-02 | | 2 | 2 | 2019-08-02 | 2019-08-02 | |</description>
    </item>
    
    <item>
      <title>1173 Immediate Food Delivery I</title>
      <link>https://foxisawesome.github.io/posts/sql/1173-immediate-food-delivery-i/</link>
      <pubDate>Wed, 07 Oct 2020 21:23:23 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/sql/1173-immediate-food-delivery-i/</guid>
      <description>LC 1173 Immediate Food Delivery I   Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal places.
The query result format is in the following example:
Delivery table: +-------------+-------------+------------+-----------------------------+ | delivery_id | customer_id | order_date | customer_pref_delivery_date | +-------------+-------------+------------+-----------------------------+ | 1 | 1 | 2019-08-01 | 2019-08-02 | | 2 | 5 | 2019-08-02 | 2019-08-02 | | 3 | 1 | 2019-08-11 | 2019-08-11 | | 4 | 3 | 2019-08-24 | 2019-08-26 | | 5 | 4 | 2019-08-21 | 2019-08-22 | | 6 | 2 | 2019-08-11 | 2019-08-13 | +-------------+-------------+------------+-----------------------------+ Result table: +----------------------+ | immediate_percentage | +----------------------+ | 33.</description>
    </item>
    
  </channel>
</rss>
