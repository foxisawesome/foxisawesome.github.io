<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>two_pointers on Q. Weng</title>
    <link>https://foxisawesome.github.io/tags/two_pointers/</link>
    <description>Recent content in two_pointers on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 03 Nov 2020 10:43:04 -0500</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/tags/two_pointers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>942 Di String Match</title>
      <link>https://foxisawesome.github.io/posts/942-di-string-match/</link>
      <pubDate>Tue, 03 Nov 2020 10:43:04 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/942-di-string-match/</guid>
      <description>LC 942 Di String Match Given a string S that only contains &amp;ldquo;I&amp;rdquo; (increase) or &amp;ldquo;D&amp;rdquo; (decrease), let N = S.length. Return any permutation A of [0, 1, ..., N] such that for all i = 0, ..., N-1: If S[i] == &amp;quot;I&amp;quot;, then A[i] &amp;lt; A[i+1] If S[i] == &amp;quot;D&amp;quot;, then A[i] &amp;gt; A[i+1] Input: &amp;quot;IDID&amp;quot; Output: [0,4,1,3,2] Solution 2020-11-03 Notes: 这题的examp</description>
    </item>
    
    <item>
      <title>1051 Height Checker</title>
      <link>https://foxisawesome.github.io/posts/1051-height-checker/</link>
      <pubDate>Tue, 03 Nov 2020 10:15:17 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1051-height-checker/</guid>
      <description>LC 1051 Height Checker Students are asked to stand in non-decreasing order of heights for an annual photo. Return the minimum number of students that must move in order for all students to be standing in non-decreasing order of height. Notice that when a group of students is selected they can reorder in any possible way between themselves and the non selected students remain on their seats. Input: heights =</description>
    </item>
    
    <item>
      <title>346 Moving Average From Data Stream</title>
      <link>https://foxisawesome.github.io/posts/346-moving-average-from-data-stream/</link>
      <pubDate>Tue, 03 Nov 2020 09:17:13 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/346-moving-average-from-data-stream/</guid>
      <description>LC 346 Moving Average From Data Stream Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window. MovingAverage m = new MovingAverage(3); m.next(1) = 1 m.next(10) = (1 + 10) / 2 m.next(3) = (1 + 10 + 3) / 3 m.next(5) = (10 + 3 + 5) / 3 Solution 2020-11-03 Notes: follow-ups: how about calc variance of streaming</description>
    </item>
    
    <item>
      <title>57 Insert Interval</title>
      <link>https://foxisawesome.github.io/posts/57-insert-interval/</link>
      <pubDate>Mon, 02 Nov 2020 13:42:31 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/57-insert-interval/</guid>
      <description>LC 57 Insert Interval   Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.
Input: intervals = [[1,3],[6,9]], newInterval = [2,5] Output: [[1,5],[6,9]]  Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] Output: [[1,2],[3,10],[12,16]] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].   Solution 2020-11-02 Notes:  greedy algo.</description>
    </item>
    
    <item>
      <title>1364 Number of Trusted Contacts of a Customer</title>
      <link>https://foxisawesome.github.io/sql/1364-number-of-trusted-contacts-of-a-customer/</link>
      <pubDate>Thu, 29 Oct 2020 11:19:50 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1364-number-of-trusted-contacts-of-a-customer/</guid>
      <description>LC 1364 Number of Trusted Contacts of a Customer    Solution 2020-10-29 Notes:     </description>
    </item>
    
    <item>
      <title>1341 Movie Rating</title>
      <link>https://foxisawesome.github.io/sql/1341-movie-rating/</link>
      <pubDate>Thu, 29 Oct 2020 11:19:39 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1341-movie-rating/</guid>
      <description>LC 1341 Movie Rating    Solution 2020-10-29 Notes:     </description>
    </item>
    
    <item>
      <title>1336 Number of Transactions per Visit</title>
      <link>https://foxisawesome.github.io/sql/1336-number-of-transactions-per-visit/</link>
      <pubDate>Thu, 29 Oct 2020 11:19:23 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1336-number-of-transactions-per-visit/</guid>
      <description>LC 1336 Number of Transactions per Visit    Solution 2020-10-29 Notes:     </description>
    </item>
    
    <item>
      <title>1327 List the Products Ordered in a Period</title>
      <link>https://foxisawesome.github.io/sql/1327-list-the-products-ordered-in-a-period/</link>
      <pubDate>Thu, 29 Oct 2020 11:19:13 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1327-list-the-products-ordered-in-a-period/</guid>
      <description>LC 1327 List the Products Ordered in a Period    Solution 2020-10-29 Notes:     </description>
    </item>
    
    <item>
      <title>1303 Find the Team Size</title>
      <link>https://foxisawesome.github.io/sql/1303-find-the-team-size/</link>
      <pubDate>Thu, 29 Oct 2020 11:19:04 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1303-find-the-team-size/</guid>
      <description>LC 1303 Find the Team Size    Solution 2020-10-29 Notes:     </description>
    </item>
    
    <item>
      <title>1264 Page Recommendations</title>
      <link>https://foxisawesome.github.io/sql/1264-page-recommendations/</link>
      <pubDate>Thu, 29 Oct 2020 11:18:52 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1264-page-recommendations/</guid>
      <description>LC 1264 Page Recommendations    Solution 2020-10-29 Notes:     </description>
    </item>
    
    <item>
      <title>1251 Average Selling Price</title>
      <link>https://foxisawesome.github.io/sql/1251-average-selling-price/</link>
      <pubDate>Thu, 29 Oct 2020 11:18:40 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1251-average-selling-price/</guid>
      <description>LC 1251 Average Selling Price    Solution 2020-10-29 Notes:     </description>
    </item>
    
    <item>
      <title>1225 Report Contiguous Dates</title>
      <link>https://foxisawesome.github.io/sql/1225-report-contiguous-dates/</link>
      <pubDate>Thu, 29 Oct 2020 11:18:31 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1225-report-contiguous-dates/</guid>
      <description>LC 1225 Report Contiguous Dates    Solution 2020-10-29 Notes:     </description>
    </item>
    
    <item>
      <title>1211 Queries Quality and Percentage</title>
      <link>https://foxisawesome.github.io/sql/1211-queries-quality-and-percentage/</link>
      <pubDate>Thu, 29 Oct 2020 11:18:19 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1211-queries-quality-and-percentage/</guid>
      <description>LC 1211 Queries Quality and Percentage    Solution 2020-10-29 Notes:     </description>
    </item>
    
    <item>
      <title>1193 Monthly Transactions I</title>
      <link>https://foxisawesome.github.io/posts/1193-monthly-transactions-i/</link>
      <pubDate>Thu, 29 Oct 2020 11:18:07 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1193-monthly-transactions-i/</guid>
      <description>LC 1193 Monthly Transactions I Write an SQL query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount. The query result format is in the following example: Transactions table: +------+---------+----------+--------+------------+ | id | country | state | amount | trans_date | +------+---------+----------+--------+------------+ | 121 | US | approved | 1000 | 2018-12-18 | | 122</description>
    </item>
    
    <item>
      <title>1158 Market Analysis I</title>
      <link>https://foxisawesome.github.io/posts/1158-market-analysis-i/</link>
      <pubDate>Thu, 29 Oct 2020 11:17:54 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1158-market-analysis-i/</guid>
      <description>LC 1158 Market Analysis I Write an SQL query to find for each user, the join date and the number of orders they made as a buyer in 2019. The query result format is in the following example: Users table: +---------+------------+----------------+ | user_id | join_date | favorite_brand | +---------+------------+----------------+ | 1 | 2018-01-01 | Lenovo | | 2 | 2018-02-09 | Samsung | | 3 | 2018-01-19 | LG |</description>
    </item>
    
    <item>
      <title>1149 Article Views II</title>
      <link>https://foxisawesome.github.io/posts/1149-article-views-ii/</link>
      <pubDate>Thu, 29 Oct 2020 11:17:39 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1149-article-views-ii/</guid>
      <description>LC 1149 Article Views II Write an SQL query to find all the people who viewed more than one article on the same date, sorted in ascending order by their id. The query result format is in the following example: Views table: +------------+-----------+-----------+------------+ | article_id | author_id | viewer_id | view_date | +------------+-----------+-----------+------------+ | 1 | 3 | 5 | 2019-08-01 | | 3 | 4 | 5 | 2019-08-01</description>
    </item>
    
    <item>
      <title>1132 Reported Posts II</title>
      <link>https://foxisawesome.github.io/posts/1132-reported-posts-ii/</link>
      <pubDate>Thu, 29 Oct 2020 11:14:32 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1132-reported-posts-ii/</guid>
      <description>LC 1132 Reported Posts II Write an SQL query to find the average for daily percentage of posts that got removed after being reported as spam, rounded to 2 decimal places. The query result format is in the following example: Actions table: +---------+---------+-------------+--------+--------+ | user_id | post_id | action_date | action | extra | +---------+---------+-------------+--------+--------+ | 1 | 1 | 2019-07-01 | view | null | | 1 | 1</description>
    </item>
    
    <item>
      <title>1127 User Purchase Platform</title>
      <link>https://foxisawesome.github.io/posts/1127-user-purchase-platform/</link>
      <pubDate>Thu, 29 Oct 2020 11:14:19 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1127-user-purchase-platform/</guid>
      <description>LC 1127 User Purchase Platform   Write an SQL query to find the total number of users and the total amount spent using mobile only, desktop only and both mobile and desktop together for each date.
The query result format is in the following example:
Spending table: +---------+------------+----------+--------+ | user_id | spend_date | platform | amount | +---------+------------+----------+--------+ | 1 | 2019-07-01 | mobile | 100 | | 1 | 2019-07-01 | desktop | 100 | | 2 | 2019-07-01 | mobile | 100 | | 2 | 2019-07-02 | mobile | 100 | | 3 | 2019-07-01 | desktop | 100 | | 3 | 2019-07-02 | desktop | 100 | +---------+------------+----------+--------+ Result table: +------------+----------+--------------+-------------+ | spend_date | platform | total_amount | total_users | +------------+----------+--------------+-------------+ | 2019-07-01 | desktop | 100 | 1 | | 2019-07-01 | mobile | 100 | 1 | | 2019-07-01 | both | 200 | 1 | | 2019-07-02 | desktop | 100 | 1 | | 2019-07-02 | mobile | 100 | 1 | | 2019-07-02 | both | 0 | 0 | +------------+----------+--------------+-------------+ On 2019-07-01, user 1 purchased using both desktop and mobile, user 2 purchased using mobile only and user 3 purchased using desktop only.</description>
    </item>
    
    <item>
      <title>1126 Active Businesses</title>
      <link>https://foxisawesome.github.io/posts/1126-active-businesses/</link>
      <pubDate>Thu, 29 Oct 2020 11:14:06 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1126-active-businesses/</guid>
      <description>LC 1126 Active Businesses Write an SQL query to find all active businesses. An active business is a business that has more than one event type with occurences greater than the average occurences of that event type among all businesses. The query result format is in the following example: Events table: +-------------+------------+------------+ | business_id | event_type | occurences | +-------------+------------+------------+ | 1 | reviews | 7 | | 3 |</description>
    </item>
    
    <item>
      <title>1098 Unpopular Books</title>
      <link>https://foxisawesome.github.io/posts/1098-unpopular-books/</link>
      <pubDate>Thu, 29 Oct 2020 10:21:21 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1098-unpopular-books/</guid>
      <description>LC 1098 Unpopular Books Write an SQL query that reports the books that have sold less than 10 copies in the last year, excluding books that have been available for less than 1 month from today. Assume today is 2019-06-23. The query result format is in the following example: Books table: +---------+--------------------+----------------+ | book_id | name | available_from | +---------+--------------------+----------------+ | 1 | &amp;quot;Kalila And Demna&amp;quot; | 2010-01-01 | |</description>
    </item>
    
  </channel>
</rss>
