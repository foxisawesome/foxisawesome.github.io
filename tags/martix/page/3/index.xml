<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>martix on Q. Weng</title>
    <link>https://foxisawesome.github.io/tags/martix/</link>
    <description>Recent content in martix on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 11 Oct 2020 10:12:32 -0400</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/tags/martix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>610 Triangle Judgement</title>
      <link>https://foxisawesome.github.io/posts/610-triangle-judgement/</link>
      <pubDate>Sun, 25 Oct 2020 10:02:33 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/610-triangle-judgement/</guid>
      <description>LC 610 Triangle Judgement Could you help Tim by writing a query to judge whether these three sides can form a triangle, assuming table triangle holds the length of the three sides x, y and z. | x | y | z | |----|----|----| | 13 | 15 | 30 | | 10 | 20 | 15 | For the sample data above, your query should return the follow result:</description>
    </item>
    
    <item>
      <title>612 Shortest Distance in a Plane</title>
      <link>https://foxisawesome.github.io/posts/612-shortest-distance-in-a-plane/</link>
      <pubDate>Sun, 25 Oct 2020 10:00:41 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/612-shortest-distance-in-a-plane/</guid>
      <description>LC 612 Shortest Distance in a Plane Table point_2d holds the coordinates (x,y) of some unique points (more than two) in a plane. Write a query to find the shortest distance between these points rounded to 2 decimals. | x | y | |----|----| | -1 | -1 | | 0 | 0 | | -1 | -2 | The shortest distance is 1.00 from point (-1,-1) to (-1,2). So</description>
    </item>
    
    <item>
      <title>586 Customer Placing the Largest Number of Orders</title>
      <link>https://foxisawesome.github.io/posts/586-customer-placing-the-largest-number-of-orders/</link>
      <pubDate>Sat, 24 Oct 2020 20:14:32 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/586-customer-placing-the-largest-number-of-orders/</guid>
      <description>LC 586 Customer Placing the Largest Number of Orders Query the customer_number from the *orders* table for the customer who has placed the largest number of orders. It is guaranteed that exactly one customer will have placed more orders than any other customer. Solution 2020-10-24 Notes: 秒了 select customer_number from (select customer_number, count(order_number) as ct from orders group by 1 order by ct desc) a limit 1</description>
    </item>
    
    <item>
      <title>580 Count Student Number in Departments</title>
      <link>https://foxisawesome.github.io/posts/580-count-student-number-in-departments/</link>
      <pubDate>Sat, 24 Oct 2020 20:11:01 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/580-count-student-number-in-departments/</guid>
      <description>LC 580 Count Student Number in Departments Write a query to print the respective department name and number of students majoring in each department for all departments in the department table (even ones with no current students). Sort your results by descending number of students; if two or more departments have the same number of students, then sort those departments alphabetically by department name. *student* table: | student_id | student_name</description>
    </item>
    
    <item>
      <title>578 Get Highest Answer Rate Question</title>
      <link>https://foxisawesome.github.io/posts/578-get-highest-answer-rate-question/</link>
      <pubDate>Sat, 24 Oct 2020 20:07:05 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/578-get-highest-answer-rate-question/</guid>
      <description>LC 578 Get Highest Answer Rate Question   Get the highest answer rate question from a table survey_log with these columns: id, action, question_id, answer_id, q_num, timestamp.
id means user id; action has these kind of values: &amp;ldquo;show&amp;rdquo;, &amp;ldquo;answer&amp;rdquo;, &amp;ldquo;skip&amp;rdquo;; answer_id is not null when action column is &amp;ldquo;answer&amp;rdquo;, while is null for &amp;ldquo;show&amp;rdquo; and &amp;ldquo;skip&amp;rdquo;; q_num is the numeral order of the question in current session.
Write a sql query to identify the question which has the highest answer rate.</description>
    </item>
    
    <item>
      <title>570 Managers With at Least 5 Direct Reports</title>
      <link>https://foxisawesome.github.io/posts/570-managers-with-at-least-5-direct-reports/</link>
      <pubDate>Sat, 24 Oct 2020 19:50:25 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/570-managers-with-at-least-5-direct-reports/</guid>
      <description>LC 570 Managers With at Least 5 Direct Reports The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id. +------+----------+-----------+----------+ |Id |Name |Department |ManagerId | +------+----------+-----------+----------+ |101 |John |A |null | |102 |Dan |A |101 | |103 |James |A |101 | |104 |Amy |A |101 | |105 |Anne |A |101 | |106 |Ron |B |101 |</description>
    </item>
    
    <item>
      <title>550 Game Play Analysis Iv</title>
      <link>https://foxisawesome.github.io/posts/550-game-play-analysis-iv/</link>
      <pubDate>Sat, 24 Oct 2020 19:46:40 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/550-game-play-analysis-iv/</guid>
      <description>LC 550 Game Play Analysis Iv Write an SQL query that reports the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of</description>
    </item>
    
    <item>
      <title>511 Game Play Analysis I</title>
      <link>https://foxisawesome.github.io/posts/511-game-play-analysis-i/</link>
      <pubDate>Sat, 24 Oct 2020 19:38:18 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/511-game-play-analysis-i/</guid>
      <description>LC 511 Game Play Analysis I Write an SQL query that reports the first login date for each player. The query result format is in the following example: Activity table: +-----------+-----------+------------+--------------+ | player_id | device_id | event_date | games_played | +-----------+-----------+------------+--------------+ | 1 | 2 | 2016-03-01 | 5 | | 1 | 2 | 2016-05-02 | 6 | | 2 | 3 | 2017-06-25 | 1 | | 3</description>
    </item>
    
    <item>
      <title>1501 Countries You Can Safely Invest In</title>
      <link>https://foxisawesome.github.io/posts/1501-countries-you-can-safely-invest-in/</link>
      <pubDate>Thu, 22 Oct 2020 10:50:21 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1501-countries-you-can-safely-invest-in/</guid>
      <description>LC 1501 Countries You Can Safely Invest In Write an SQL query to find the countries where this company can invest. Return the result table in any order. The query result format is in the following example. Person table: +----+----------+--------------+ | id | name | phone_number | +----+----------+--------------+ | 3 | Jonathan | 051-1234567 | | 12 | Elvis | 051-7654321 | | 1 | Moncef | 212-1234567 | |</description>
    </item>
    
    <item>
      <title>1097 Game Play Analysis V</title>
      <link>https://foxisawesome.github.io/posts/1097-game-play-analysis-v/</link>
      <pubDate>Thu, 22 Oct 2020 10:35:41 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1097-game-play-analysis-v/</guid>
      <description>LC 1097 Game Play Analysis V We define the install date of a player to be the first login day of that player. We also define day 1 retention of some date X to be the number of players whose install date is X and they logged back in on the day right after X, divided by the number of players whose install date is X, rounded to 2 decimal</description>
    </item>
    
    <item>
      <title>647 Palindromic Substrings</title>
      <link>https://foxisawesome.github.io/posts/647-palindromic-substrings/</link>
      <pubDate>Wed, 21 Oct 2020 14:39:41 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/647-palindromic-substrings/</guid>
      <description>LC 647 Palindromic Substrings   Given a string, your task is to count how many palindromic substrings in this string.
The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.
Input: &amp;quot;abc&amp;quot; Output: 3 Explanation: Three palindromic strings: &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;.  Input: &amp;quot;aaa&amp;quot; Output: 6 Explanation: Six palindromic strings: &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;aaa&amp;quot;.   Solution 2020-10-21 Notes:  dp[i][j]: if s[i:j+1] is palindromic.</description>
    </item>
    
    <item>
      <title>1353 Maximum Number of Events That Can Be Attended</title>
      <link>https://foxisawesome.github.io/posts/1353-maximum-number-of-events-that-can-be-attended/</link>
      <pubDate>Wed, 21 Oct 2020 14:05:38 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1353-maximum-number-of-events-that-can-be-attended/</guid>
      <description>LC 1353 Maximum Number of Events That Can Be Attended Given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi. You can attend an event i at any day d where startTimei &amp;lt;= d &amp;lt;= endTimei. Notice that you can only attend one event at any time d. Return the maximum number of events you can attend. Input: events =</description>
    </item>
    
    <item>
      <title>901 Online Stock Span</title>
      <link>https://foxisawesome.github.io/posts/901-online-stock-span/</link>
      <pubDate>Wed, 21 Oct 2020 14:02:39 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/901-online-stock-span/</guid>
      <description>LC 901 Online Stock Span Write a class StockSpanner which collects daily price quotes for some stock, and returns the span of that stock&amp;rsquo;s price for the current day. The span of the stock&amp;rsquo;s price today is defined as the maximum number of consecutive days (starting from today and going backwards) for which the price of the stock was less than or equal to today&amp;rsquo;s price. For example, if the</description>
    </item>
    
    <item>
      <title>152 Maximum Product Subarray</title>
      <link>https://foxisawesome.github.io/posts/152-maximum-product-subarray/</link>
      <pubDate>Wed, 21 Oct 2020 13:33:35 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/152-maximum-product-subarray/</guid>
      <description>LC 152 Maximum Product Subarray Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product. Input: [2,3,-2,4] Output: 6 Explanation: [2,3] has the largest product 6. Solution 2020-10-21 Notes: 最大值可能来自三种来源：nums[i], prev_max X nums[i], prev_min X numi[i] 优化了</description>
    </item>
    
    <item>
      <title>1398 Customers Who Bought Products a and B but Not C</title>
      <link>https://foxisawesome.github.io/posts/1398-customers-who-bought-products-a-and-b-but-not-c/</link>
      <pubDate>Wed, 21 Oct 2020 11:20:02 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1398-customers-who-bought-products-a-and-b-but-not-c/</guid>
      <description>LC 1398 Customers Who Bought Products a and B but Not C Write an SQL query to report the customer_id and customer_name of customers who bought products &amp;ldquo;A&amp;rdquo;, &amp;ldquo;B&amp;rdquo; but did not buy the product &amp;ldquo;C&amp;rdquo; since we want to recommend them buy this product. Return the result table ordered by customer_id. Solution 2020-10-21 Notes: 秒了 SELECT a.* FROM customers a JOIN ( SELECT * FROM orders GROUP BY</description>
    </item>
    
    <item>
      <title>1308 Running Total for Different Genders</title>
      <link>https://foxisawesome.github.io/posts/1308-running-total-for-different-genders/</link>
      <pubDate>Wed, 21 Oct 2020 11:14:44 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1308-running-total-for-different-genders/</guid>
      <description>LC 1308 Running Total for Different Genders Write an SQL query to find the total score for each gender at each day. Order the result table by gender and day The query result format is in the following example: Scores table: +-------------+--------+------------+--------------+ | player_name | gender | day | score_points | +-------------+--------+------------+--------------+ | Aron | F | 2020-01-01 | 17 | | Alice | F | 2020-01-07 | 23 |</description>
    </item>
    
    <item>
      <title>1393 Capital Gainloss</title>
      <link>https://foxisawesome.github.io/posts/1393-capital-gainloss/</link>
      <pubDate>Wed, 21 Oct 2020 11:10:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1393-capital-gainloss/</guid>
      <description>LC 1393 Capital Gainloss Write an SQL query to report the Capital gain/loss for each stock. The capital gain/loss of a stock is total gain or loss after buying and selling the stock one or many times. Return the result table in any order. The query result format is in the following example: Stocks table: +---------------+-----------+---------------+--------+ | stock_name | operation | operation_day | price | +---------------+-----------+---------------+--------+ | Leetcode | Buy</description>
    </item>
    
    <item>
      <title>1445 Apples Oranges</title>
      <link>https://foxisawesome.github.io/posts/1445-apples-oranges/</link>
      <pubDate>Wed, 21 Oct 2020 10:09:59 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1445-apples-oranges/</guid>
      <description>LC 1445 Apples Oranges Write an SQL query to report the difference between number of apples and oranges sold each day. Return the result table ordered by sale_date in format (&amp;lsquo;YYYY-MM-DD&amp;rsquo;). The query result format is in the following example: Sales table: +------------+------------+-------------+ | sale_date | fruit | sold_num | +------------+------------+-------------+ | 2020-05-01 | apples | 10 | | 2020-05-01 | oranges | 8 | | 2020-05-02 | apples |</description>
    </item>
    
    <item>
      <title>1270 All People Report to the Given Manager</title>
      <link>https://foxisawesome.github.io/posts/1270-all-people-report-to-the-given-manager/</link>
      <pubDate>Wed, 21 Oct 2020 10:02:05 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1270-all-people-report-to-the-given-manager/</guid>
      <description>LC 1270 All People Report to the Given Manager Write an SQL query to find employee_id of all employees that directly or indirectly report their work to the head of the company. The indirect relation between managers will not exceed 3 managers as the company is small. Return result table in any order without duplicates. The query result format is in the following example: Employees table: +-------------+---------------+------------+ | employee_id |</description>
    </item>
    
    <item>
      <title>383 Ransom Note</title>
      <link>https://foxisawesome.github.io/posts/383-ransom-note/</link>
      <pubDate>Mon, 19 Oct 2020 19:35:54 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/383-ransom-note/</guid>
      <description>LC 383 Ransom Note   Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.
Each letter in the magazine string can only be used once in your ransom note.
Input: ransomNote = &amp;quot;a&amp;quot;, magazine = &amp;quot;b&amp;quot; Output: false   Solution 2020-10-19 Notes:  edge case is acutally hard to get them right in the first place  class Solution: def canConstruct(self, ransomNote: str, magazine: str) -&amp;gt; bool: if not ransomNote: return True if not magazine: return False d = collections.</description>
    </item>
    
  </channel>
</rss>
