<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linkedList on Q. Weng</title>
    <link>https://foxisawesome.github.io/tags/linkedlist/</link>
    <description>Recent content in linkedList on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Sep 2020 09:38:40 -0400</lastBuildDate>
    
	<atom:link href="https://foxisawesome.github.io/tags/linkedlist/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>455 Add Two Num II</title>
      <link>https://foxisawesome.github.io/posts/455-add-two-num-ii/</link>
      <pubDate>Wed, 02 Sep 2020 09:38:40 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/455-add-two-num-ii/</guid>
      <description>LC 455 Add Two Num II   You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Follow up: What if you cannot modify the input lists?</description>
    </item>
    
    <item>
      <title>148 Sort List</title>
      <link>https://foxisawesome.github.io/posts/148-sort-list/</link>
      <pubDate>Tue, 01 Sep 2020 19:26:00 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/148-sort-list/</guid>
      <description>LC 148 Sort List   Sort a linked list in O(n log n) time using constant space complexity.
Example 1:
Input: 4-&amp;gt;2-&amp;gt;1-&amp;gt;3 Output: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4 Example 2:
Input: -1-&amp;gt;5-&amp;gt;3-&amp;gt;4-&amp;gt;0 Output: -1-&amp;gt;0-&amp;gt;3-&amp;gt;4-&amp;gt;5  Solution 2020-09-01 Notes:
 Time Complaxity O(nlogn) indicates merge sort algo. in the sortList, line 8:if not head or not head.next: return head actually returns head not None. slow and fast pointers to divide list into two need a lfet tail pointer: l_tail to cut off left linked list.</description>
    </item>
    
    <item>
      <title>141 Linked List Cycle</title>
      <link>https://foxisawesome.github.io/posts/141-linked-list-cycle/</link>
      <pubDate>Sun, 30 Aug 2020 21:35:50 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/141-linked-list-cycle/</guid>
      <description>LC 141 Linked List Cycle 
 Given a linked list, determine if it has a cycle in it.
To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.
Example 1:
Input: head = [3,2,0,-4], pos = 1 Output: true Explanation: There is a cycle in the linked list, where tail connects to the second node.</description>
    </item>
    
    <item>
      <title>328 Odd Even Linked List</title>
      <link>https://foxisawesome.github.io/posts/328-odd-even-linked-list/</link>
      <pubDate>Sun, 30 Aug 2020 21:27:32 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/328-odd-even-linked-list/</guid>
      <description>LC 328
 Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.
You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.
Example 1:
Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 1-&amp;gt;3-&amp;gt;5-&amp;gt;2-&amp;gt;4-&amp;gt;NULL  linked list 终于在周末刷出感觉了。这题也一遍就过了。
class Solution: def oddEvenList(self, head: ListNode) -&amp;gt; ListNode: if not head: return odd = p1 = ListNode(1) even = p2 = ListNode(0) count = 1 while head: if count % 2 == 1: odd.</description>
    </item>
    
    <item>
      <title>First Post Linked List</title>
      <link>https://foxisawesome.github.io/posts/first-post-linked-list/</link>
      <pubDate>Sun, 30 Aug 2020 16:54:06 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/first-post-linked-list/</guid>
      <description>开始刷Leetcode 好几个月了，今天开始学很多人用blog 记录下自己的notes，也激励自己好好刷题！First post!
It takes a while for me to get how exactly Linked List works. I used following utility functions to keep my leetcode solutions and run codes locally.
Note:
 say head = ListNode(0), then head = head.next is to iterate to next node on the Linked List. use head.next = a to point to next node.  # My liked list utility functions:  class ListNode: def __init__(self, val=0, next=None): self.</description>
    </item>
    
    <item>
      <title>206 Reverse Linked List</title>
      <link>https://foxisawesome.github.io/posts/206-reverse-linked-list/</link>
      <pubDate>Sat, 01 Aug 2020 20:06:27 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/206-reverse-linked-list/</guid>
      <description>LC 206 Reverse Linked List   Reverse a singly linked list.
Example:
Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL  Solution 2020-09-01 Notes:
 这题刷了不下10遍了，终于明白iteration这里的四步操作了。 recursion的做法还是似懂非懂，还得再看看。感觉TreeNode, ListNode 的recursion 都是if not head/root: return head/root。 另外，recession 这里返回的是 以head.next为头reversed 的list，只需要再把head.next	 reverse 下就好了。  # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: # iteration def reverseList_iter(self, head: ListNode) -&amp;gt; ListNode: if not head: return None prev = None curr = head while curr: temp = curr.</description>
    </item>
    
    <item>
      <title>2 Add Two Num</title>
      <link>https://foxisawesome.github.io/posts/2-add-two-num/</link>
      <pubDate>Thu, 02 Jul 2020 10:08:20 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/2-add-two-num/</guid>
      <description>LC 2 Add Two Num   You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example:
Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4) Output: 7 -&amp;gt; 0 -&amp;gt; 8 Explanation: 342 + 465 = 807.</description>
    </item>
    
  </channel>
</rss>