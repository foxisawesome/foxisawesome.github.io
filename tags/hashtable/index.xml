<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hashtable on Q. Weng</title>
    <link>https://foxisawesome.github.io/tags/hashtable/</link>
    <description>Recent content in hashtable on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 19 Oct 2020 19:35:54 -0400</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/tags/hashtable/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>211 Design Add and Search Words Data Structure</title>
      <link>https://foxisawesome.github.io/posts/211-design-add-and-search-words-data-structure/</link>
      <pubDate>Tue, 01 Dec 2020 15:17:30 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/211-design-add-and-search-words-data-structure/</guid>
      <description>LC 211 Design Add and Search Words Data Structure   Design a data structure that supports adding new words and finding if a string matches any previously added string.
Implement the WordDictionary class:
 WordDictionary() Initializes the object. void addWord(word) Adds word to the data structure, it can be matched later. bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise.</description>
    </item>
    
    <item>
      <title>208 Implement Trie Prefix Tree</title>
      <link>https://foxisawesome.github.io/posts/208-implement-trie-prefix-tree/</link>
      <pubDate>Tue, 01 Dec 2020 14:55:09 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/208-implement-trie-prefix-tree/</guid>
      <description>LC 208 Implement Trie Prefix Tree   Implement a trie with insert, search, and startsWith methods.
Example:
Trie trie = new Trie(); trie.insert(&amp;quot;apple&amp;quot;); trie.search(&amp;quot;apple&amp;quot;); // returns true trie.search(&amp;quot;app&amp;quot;); // returns false trie.startsWith(&amp;quot;app&amp;quot;); // returns true trie.insert(&amp;quot;app&amp;quot;); trie.search(&amp;quot;app&amp;quot;); // returns true   Solution 2020-12-01 Notes:  each child node is a dict. current = current.children[w] recursively adds letter to the tree structure. .isword marks if it is a complete word.</description>
    </item>
    
    <item>
      <title>215 Kth Largest Element in an Array</title>
      <link>https://foxisawesome.github.io/posts/215-kth-largest-element-in-an-array/</link>
      <pubDate>Thu, 19 Nov 2020 10:30:56 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/215-kth-largest-element-in-an-array/</guid>
      <description>LC 215 Kth Largest Element in an Array Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element. Input: [3,2,1,5,6,4] and k = 2 Output: 5 Solution 2020-11-19 Notes: Sort() class Solution: def findKthLargest(self, nums: List[int], k: int) -&amp;gt; int: nums.sort(reverse=True) return nums[k-1] # Time O(NlogN) # Space O(1) Heap: 构建he</description>
    </item>
    
    <item>
      <title>1384 Total Sales Amount by Year</title>
      <link>https://foxisawesome.github.io/sql/1384-total-sales-amount-by-year/</link>
      <pubDate>Fri, 06 Nov 2020 13:34:15 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1384-total-sales-amount-by-year/</guid>
      <description>LC 1384 Total Sales Amount by Year   Write an SQL query to report the Total sales amount of each item for each year, with corresponding product name, product_id, product_name and report_year.
Dates of the sales years are between 2018 to 2020. Return the result table ordered by product_id and report_year.
Product table: +------------+--------------+ | product_id | product_name | +------------+--------------+ | 1 | LC Phone | | 2 | LC T-Shirt | | 3 | LC Keychain | +------------+--------------+ Sales table: +------------+--------------+-------------+---------------------+ | product_id | period_start | period_end | average_daily_sales | +------------+--------------+-------------+---------------------+ | 1 | 2019-01-25 | 2019-02-28 | 100 | | 2 | 2018-12-01 | 2020-01-01 | 10 | | 3 | 2019-12-01 | 2020-01-31 | 1 | +------------+--------------+-------------+---------------------+ Result table: +------------+--------------+-------------+--------------+ | product_id | product_name | report_year | total_amount | +------------+--------------+-------------+--------------+ | 1 | LC Phone | 2019 | 3500 | | 2 | LC T-Shirt | 2018 | 310 | | 2 | LC T-Shirt | 2019 | 3650 | | 2 | LC T-Shirt | 2020 | 10 | | 3 | LC Keychain | 2019 | 31 | | 3 | LC Keychain | 2020 | 31 | +------------+--------------+-------------+--------------+ LC Phone was sold for the period of 2019-01-25 to 2019-02-28, and there are 35 days for this period.</description>
    </item>
    
    <item>
      <title>1645 Hopper Company Queries II</title>
      <link>https://foxisawesome.github.io/sql/1645-hopper-company-queries-ii/</link>
      <pubDate>Fri, 06 Nov 2020 13:33:42 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1645-hopper-company-queries-ii/</guid>
      <description>LC 1645 Hopper Company Queries II   Write an SQL query to report the percentage of working drivers (working_percentage) for each month of 2020 where:
Note that if the number of available drivers during a month is zero, we consider the working_percentage to be 0.
Return the result table ordered by month in ascending order, where month is the month&amp;rsquo;s number (January is 1, February is 2, etc.). Round working_percentage to the nearest 2 decimal places.</description>
    </item>
    
    <item>
      <title>1635 Hopper Company Queries I</title>
      <link>https://foxisawesome.github.io/sql/1635-hopper-company-queries-i/</link>
      <pubDate>Fri, 06 Nov 2020 13:33:26 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1635-hopper-company-queries-i/</guid>
      <description>LC 1635 Hopper Company Queries I   Write an SQL query to report the following statistics for each month of 2020:
 The number of drivers currently with the Hopper company by the end of the month (active_drivers). The number of accepted rides in that month (accepted_rides).  Return the result table ordered by month in ascending order, where month is the month&amp;rsquo;s number (January is 1, February is 2, etc.</description>
    </item>
    
    <item>
      <title>1351 Count Negative Numbers in a Sorted Matrix</title>
      <link>https://foxisawesome.github.io/posts/1351-count-negative-numbers-in-a-sorted-matrix/</link>
      <pubDate>Wed, 04 Nov 2020 13:35:18 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1351-count-negative-numbers-in-a-sorted-matrix/</guid>
      <description>LC 1351 Count Negative Numbers in a Sorted Matrix   Given a m * n matrix grid which is sorted in non-increasing order both row-wise and column-wise.
Return the number of negative numbers in grid.
Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]] Output: 8 Explanation: There are 8 negatives number in the matrix.   Solution 2020-11-04 Notes: class Solution: def countNegatives(self, grid: List[List[int]]) -&amp;gt; int: nr, nc = len(grid), len(grid[0]) ans, i = 0, 0 while i &amp;lt; nr: j = 0 while j &amp;lt; nc: if grid[i][j] &amp;lt; 0: ans += nc-j break else: j += 1 i += 1 return ans # Time O(MN) # Space O(1)  </description>
    </item>
    
    <item>
      <title>942 Di String Match</title>
      <link>https://foxisawesome.github.io/posts/942-di-string-match/</link>
      <pubDate>Tue, 03 Nov 2020 10:43:04 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/942-di-string-match/</guid>
      <description>LC 942 Di String Match Given a string S that only contains &amp;ldquo;I&amp;rdquo; (increase) or &amp;ldquo;D&amp;rdquo; (decrease), let N = S.length. Return any permutation A of [0, 1, ..., N] such that for all i = 0, ..., N-1: If S[i] == &amp;quot;I&amp;quot;, then A[i] &amp;lt; A[i+1] If S[i] == &amp;quot;D&amp;quot;, then A[i] &amp;gt; A[i+1] Input: &amp;quot;IDID&amp;quot; Output: [0,4,1,3,2] Solution 2020-11-03 Notes: 这题的examp</description>
    </item>
    
    <item>
      <title>1051 Height Checker</title>
      <link>https://foxisawesome.github.io/posts/1051-height-checker/</link>
      <pubDate>Tue, 03 Nov 2020 10:15:17 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1051-height-checker/</guid>
      <description>LC 1051 Height Checker Students are asked to stand in non-decreasing order of heights for an annual photo. Return the minimum number of students that must move in order for all students to be standing in non-decreasing order of height. Notice that when a group of students is selected they can reorder in any possible way between themselves and the non selected students remain on their seats. Input: heights =</description>
    </item>
    
    <item>
      <title>346 Moving Average From Data Stream</title>
      <link>https://foxisawesome.github.io/posts/346-moving-average-from-data-stream/</link>
      <pubDate>Tue, 03 Nov 2020 09:17:13 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/346-moving-average-from-data-stream/</guid>
      <description>LC 346 Moving Average From Data Stream Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window. MovingAverage m = new MovingAverage(3); m.next(1) = 1 m.next(10) = (1 + 10) / 2 m.next(3) = (1 + 10 + 3) / 3 m.next(5) = (10 + 3 + 5) / 3 Solution 2020-11-03 Notes: follow-ups: how about calc variance of streaming</description>
    </item>
    
    <item>
      <title>57 Insert Interval</title>
      <link>https://foxisawesome.github.io/posts/57-insert-interval/</link>
      <pubDate>Mon, 02 Nov 2020 13:42:31 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/57-insert-interval/</guid>
      <description>LC 57 Insert Interval   Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.
Input: intervals = [[1,3],[6,9]], newInterval = [2,5] Output: [[1,5],[6,9]]  Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] Output: [[1,2],[3,10],[12,16]] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].   Solution 2020-11-02 Notes:  greedy algo.</description>
    </item>
    
    <item>
      <title>1407 Top Travellers</title>
      <link>https://foxisawesome.github.io/posts/1407-top-travellers/</link>
      <pubDate>Sun, 01 Nov 2020 13:27:09 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1407-top-travellers/</guid>
      <description>LC 1407 Top Travellers   Write an SQL query to report the distance travelled by each user.
Return the result table ordered by travelled_distance in descending order, if two or more users travelled the same distance, order them by their name in ascending order.
The query result format is in the following example.
Users table: +------+-----------+ | id | name | +------+-----------+ | 1 | Alice | | 2 | Bob | | 3 | Alex | | 4 | Donald | | 7 | Lee | | 13 | Jonathan | | 19 | Elvis | +------+-----------+ Rides table: +------+----------+----------+ | id | user_id | distance | +------+----------+----------+ | 1 | 1 | 120 | | 2 | 2 | 317 | | 3 | 3 | 222 | | 4 | 7 | 100 | | 5 | 13 | 312 | | 6 | 19 | 50 | | 7 | 7 | 120 | | 8 | 19 | 400 | | 9 | 7 | 230 | +------+----------+----------+ Result table: +----------+--------------------+ | name | travelled_distance | +----------+--------------------+ | Elvis | 450 | | Lee | 450 | | Bob | 317 | | Jonathan | 312 | | Alex | 222 | | Alice | 120 | | Donald | 0 | +----------+--------------------+ Elvis and Lee travelled 450 miles, Elvis is the top traveller as his name is alphabetically smaller than Lee.</description>
    </item>
    
    <item>
      <title>1440 Evaluate Boolean Expression</title>
      <link>https://foxisawesome.github.io/posts/1440-evaluate-boolean-expression/</link>
      <pubDate>Sun, 01 Nov 2020 13:23:21 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1440-evaluate-boolean-expression/</guid>
      <description>LC 1440 Evaluate Boolean Expression   Write an SQL query to evaluate the boolean expressions in Expressions table.
Return the result table in any order.
The query result format is in the following example.
Variables table: +------+-------+ | name | value | +------+-------+ | x | 66 | | y | 77 | +------+-------+ Expressions table: +--------------+----------+---------------+ | left_operand | operator | right_operand | +--------------+----------+---------------+ | x | &amp;gt; | y | | x | &amp;lt; | y | | x | = | y | | y | &amp;gt; | x | | y | &amp;lt; | x | | x | = | x | +--------------+----------+---------------+ Result table: +--------------+----------+---------------+-------+ | left_operand | operator | right_operand | value | +--------------+----------+---------------+-------+ | x | &amp;gt; | y | false | | x | &amp;lt; | y | true | | x | = | y | false | | y | &amp;gt; | x | true | | y | &amp;lt; | x | false | | x | = | x | true | +--------------+----------+---------------+-------+ As shown, you need find the value of each boolean exprssion in the table using the variables table.</description>
    </item>
    
    <item>
      <title>1435 Create a Session Bar Chart</title>
      <link>https://foxisawesome.github.io/posts/1435-create-a-session-bar-chart/</link>
      <pubDate>Sun, 01 Nov 2020 13:21:24 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1435-create-a-session-bar-chart/</guid>
      <description>LC 1435 Create a Session Bar Chart   Write an SQL query to report the (bin, total) in any order.
The query result format is in the following example.
Sessions table: +-------------+---------------+ | session_id | duration | +-------------+---------------+ | 1 | 30 | | 2 | 199 | | 3 | 299 | | 4 | 580 | | 5 | 1000 | +-------------+---------------+ Result table: +--------------+--------------+ | bin | total | +--------------+--------------+ | [0-5&amp;gt; | 3 | | [5-10&amp;gt; | 1 | | [10-15&amp;gt; | 0 | | 15 or more | 1 | +--------------+--------------+ For session_id 1, 2 and 3 have a duration greater or equal than 0 minutes and less than 5 minutes.</description>
    </item>
    
    <item>
      <title>1421 Npv Queries</title>
      <link>https://foxisawesome.github.io/posts/1421-npv-queries/</link>
      <pubDate>Sun, 01 Nov 2020 13:19:46 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1421-npv-queries/</guid>
      <description>LC 1421 Npv Queries   Write an SQL query to find the npv of all each query of queries table.
Return the result table in any order. The query result format is in the following example:
NPV table: +------+--------+--------+ | id | year | npv | +------+--------+--------+ | 1 | 2018 | 100 | | 7 | 2020 | 30 | | 13 | 2019 | 40 | | 1 | 2019 | 113 | | 2 | 2008 | 121 | | 3 | 2009 | 12 | | 11 | 2020 | 99 | | 7 | 2019 | 0 | +------+--------+--------+ Queries table: +------+--------+ | id | year | +------+--------+ | 1 | 2019 | | 2 | 2008 | | 3 | 2009 | | 7 | 2018 | | 7 | 2019 | | 7 | 2020 | | 13 | 2019 | +------+--------+ Result table: +------+--------+--------+ | id | year | npv | +------+--------+--------+ | 1 | 2019 | 113 | | 2 | 2008 | 121 | | 3 | 2009 | 12 | | 7 | 2018 | 0 | | 7 | 2019 | 0 | | 7 | 2020 | 30 | | 13 | 2019 | 40 | +------+--------+--------+ The npv value of (7, 2018) is not present in the NPV table, we consider it 0.</description>
    </item>
    
    <item>
      <title>1378 Replace Employee Id With the Unique Identifier</title>
      <link>https://foxisawesome.github.io/posts/1378-replace-employee-id-with-the-unique-identifier/</link>
      <pubDate>Sun, 01 Nov 2020 13:17:11 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1378-replace-employee-id-with-the-unique-identifier/</guid>
      <description>LC 1378 Replace Employee Id With the Unique Identifier Write an SQL query to show the unique ID of each user, If a user doesn&amp;rsquo;t have a unique ID replace just show null. Return the result table in any order. The query result format is in the following example: Employees table: +----+----------+ | id | name | +----+----------+ | 1 | Alice | | 7 | Bob | | 11</description>
    </item>
    
    <item>
      <title>1364 Number of Trusted Contacts of a Customer</title>
      <link>https://foxisawesome.github.io/posts/1364-number-of-trusted-contacts-of-a-customer/</link>
      <pubDate>Thu, 29 Oct 2020 11:19:50 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1364-number-of-trusted-contacts-of-a-customer/</guid>
      <description>LC 1364 Number of Trusted Contacts of a Customer Write an SQL query to find the following for each invoice_id: customer_name: The name of the customer the invoice is related to. price: The price of the invoice. contacts_cnt: The number of contacts related to the customer. trusted_contacts_cnt: The number of contacts related to the customer and at the same time they are customers to the shop. (i.e His/Her email exists</description>
    </item>
    
    <item>
      <title>1341 Movie Rating</title>
      <link>https://foxisawesome.github.io/posts/1341-movie-rating/</link>
      <pubDate>Thu, 29 Oct 2020 11:19:39 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1341-movie-rating/</guid>
      <description>LC 1341 Movie Rating Write the following SQL query: Find the name of the user who has rated the greatest number of movies. In case of a tie, return lexicographically smaller user name. Find the movie name with thehighest averagerating inFebruary 2020 In case of a tie, return lexicographically smaller movie name. The query is returned in 2 rows, the query result format is in the following example: Movies table:</description>
    </item>
    
    <item>
      <title>1336 Number of Transactions per Visit</title>
      <link>https://foxisawesome.github.io/posts/1336-number-of-transactions-per-visit/</link>
      <pubDate>Thu, 29 Oct 2020 11:19:23 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1336-number-of-transactions-per-visit/</guid>
      <description>LC 1336 Number of Transactions per Visit Write an SQL query to find how many users visited the bank and didn&amp;rsquo;t do any transactions, how many visited the bank and did one transaction and so on. The result table will contain two columns: transactions_count which is the number of transactions done in one visit. visits_count which is the corresponding number of users who did transactions_count in one visit to the</description>
    </item>
    
    <item>
      <title>1327 List the Products Ordered in a Period</title>
      <link>https://foxisawesome.github.io/posts/1327-list-the-products-ordered-in-a-period/</link>
      <pubDate>Thu, 29 Oct 2020 11:19:13 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1327-list-the-products-ordered-in-a-period/</guid>
      <description>LC 1327 List the Products Ordered in a Period Write an SQL query to get the names of products with greater than or equal to 100 units ordered in February 2020 and their amount. Return result table in any order. The query result format is in the following example: Products table: +-------------+-----------------------+------------------+ | product_id | product_name | product_category | +-------------+-----------------------+------------------+ | 1 | Leetcode Solutions | Book | | 2</description>
    </item>
    
  </channel>
</rss>
