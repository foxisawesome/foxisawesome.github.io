<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>matrix on Q. Weng</title>
    <link>https://foxisawesome.github.io/tags/matrix/</link>
    <description>Recent content in matrix on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 04 Nov 2020 13:35:18 -0500</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/tags/matrix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1633 Percentage of Users Attended a Contest</title>
      <link>https://foxisawesome.github.io/posts/1633-percentage-of-users-attended-a-contest/</link>
      <pubDate>Tue, 06 Oct 2020 13:33:11 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1633-percentage-of-users-attended-a-contest/</guid>
      <description>LC 1633 Percentage of Users Attended a Contest Write an SQL query to find the percentage of the users registered in each contest rounded to two decimals. Return the result table ordered by percentage in descending order. In case of a tie, order it by contest_id in ascending order. Users table: +---------+-----------+ | user_id | user_name | +---------+-----------+ | 6 | Alice | | 2 | Bob | | 7</description>
    </item>
    
    <item>
      <title>1565 Unique Orders and Customers per Month</title>
      <link>https://foxisawesome.github.io/posts/1565-unique-orders-and-customers-per-month/</link>
      <pubDate>Tue, 06 Oct 2020 13:32:52 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1565-unique-orders-and-customers-per-month/</guid>
      <description>LC 1565 Unique Orders and Customers per Month Write an SQL query to find the number of unique orders and the number of unique customers with invoices &amp;gt; $20 for each different month. Return the result table sorted in any order. Orders +----------+------------+-------------+------------+ | order_id | order_date | customer_id | invoice | +----------+------------+-------------+------------+ | 1 | 2020-09-15 | 1 | 30 | | 2 | 2020-09-17 | 2 | 90</description>
    </item>
    
    <item>
      <title>1194 Tournament Winners</title>
      <link>https://foxisawesome.github.io/posts/1194-tournament-winners/</link>
      <pubDate>Mon, 05 Oct 2020 21:07:02 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1194-tournament-winners/</guid>
      <description>LC 1194 Tournament Winners The winner in each group is the player who scored the maximum total points within the group. In the case of a tie, the lowest player_id wins. Write an SQL query to find the winner in each group. The query result format is in the following example: Players table: +-----------+------------+ | player_id | group_id | +-----------+------------+ | 15 | 1 | | 25 | 1 |</description>
    </item>
    
    <item>
      <title>571 Find Median Given Frequency of Numbers</title>
      <link>https://foxisawesome.github.io/posts/571-find-median-given-frequency-of-numbers/</link>
      <pubDate>Mon, 05 Oct 2020 20:46:24 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/571-find-median-given-frequency-of-numbers/</guid>
      <description>LC 571 Find Median Given Frequency of Numbers The Numbers table keeps the value of number and its frequency. +----------+-------------+ | Number | Frequency | +----------+-------------| | 0 | 7 | | 1 | 1 | | 2 | 3 | | 3 | 1 | +----------+-------------+ In this table, the numbers are 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, so the median is (0</description>
    </item>
    
    <item>
      <title>569 Median Employee Salary</title>
      <link>https://foxisawesome.github.io/posts/569-median-employee-salary/</link>
      <pubDate>Mon, 05 Oct 2020 20:26:19 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/569-median-employee-salary/</guid>
      <description>LC 569 Median Employee Salary The Employee table holds all employees. The employee table has three columns: Employee Id, Company Name, and Salary. +-----+------------+--------+ |Id | Company | Salary | +-----+------------+--------+ |1 | A | 2341 | |2 | A | 341 | |3 | A | 15 | |4 | A | 15314 | |5 | A | 451 | |6 | A | 513 | |7 | B</description>
    </item>
    
    <item>
      <title>1412 Total Sales Amount by Year</title>
      <link>https://foxisawesome.github.io/posts/1412-total-sales-amount-by-year/</link>
      <pubDate>Mon, 05 Oct 2020 13:34:35 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1412-total-sales-amount-by-year/</guid>
      <description>LC 1412 Total Sales Amount by Year Write an SQL query to report the students (student_id, student_name) being &amp;ldquo;quiet&amp;rdquo; in ALL exams. Don&amp;rsquo;t return the student who has never taken any exam. Return the result table ordered by student_id. The query result format is in the following example. Student table: +-------------+---------------+ | student_id | student_name | +-------------+---------------+ | 1 | Daniel | | 2 | Jade | | 3 |</description>
    </item>
    
    <item>
      <title>1555 Bank Account Summary</title>
      <link>https://foxisawesome.github.io/posts/1555-bank-account-summary/</link>
      <pubDate>Mon, 05 Oct 2020 13:32:28 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1555-bank-account-summary/</guid>
      <description>LC 1555 Bank Account Summary   Write an SQL query to report.
 user_id user_name credit, current balance after performing transactions. credit_limit_breached, check credit_limit (&amp;ldquo;Yes&amp;rdquo; or &amp;ldquo;No&amp;rdquo;)  Return the result table in any order.
Users table: +------------+--------------+-------------+ | user_id | user_name | credit | +------------+--------------+-------------+ | 1 | Moustafa | 100 | | 2 | Jonathan | 200 | | 3 | Winston | 10000 | | 4 | Luis | 800 | +------------+--------------+-------------+ Transactions table: +------------+------------+------------+----------+---------------+ | trans_id | paid_by | paid_to | amount | transacted_on | +------------+------------+------------+----------+---------------+ | 1 | 1 | 3 | 400 | 2020-08-01 | | 2 | 3 | 2 | 500 | 2020-08-02 | | 3 | 2 | 1 | 200 | 2020-08-03 | +------------+------------+------------+----------+---------------+ Result table: +------------+------------+------------+-----------------------+ | user_id | user_name | credit | credit_limit_breached | +------------+------------+------------+-----------------------+ | 1 | Moustafa | -100 | Yes | | 2 | Jonathan | 500 | No | | 3 | Winston | 9900 | No | | 4 | Luis | 800 | No | +------------+------------+------------+-----------------------+ Moustafa paid $400 on &amp;quot;2020-08-01&amp;quot; and received $200 on &amp;quot;2020-08-03&amp;quot;, credit (100 -400 +200) = -$100 Jonathan received $500 on &amp;quot;2020-08-02&amp;quot; and paid $200 on &amp;quot;2020-08-08&amp;quot;, credit (200 +500 -200) = $500 Winston received $400 on &amp;quot;2020-08-01&amp;quot; and paid $500 on &amp;quot;2020-08-03&amp;quot;, credit (10000 +400 -500) = $9990 Luis didn&#39;t received any transfer, credit = $800   Solution 2020-11-06 Notes: WITH receive AS( SELECT paid_to, SUM(amount) AS amount_r FROM transactions GROUP BY 1 ), payment AS( SELECT paid_by, SUM(amount) AS amount_t FROM transactions GROUP BY 1 ) SELECT user_id, user_name, (credit + IFNULL(amount_r,0) - IFNULL(amount_t,0)) AS credit, (CASE WHEN credit + IFNULL(amount_r,0) - IFNULL(amount_t,0) &amp;lt; 0 THEN &#39;Yes&#39; ELSE &#39;No&#39; END) AS credit_limit_breached FROM users a LEFT JOIN receive b ON a.</description>
    </item>
    
    <item>
      <title>1549 the Most Recent Orders for Each Product</title>
      <link>https://foxisawesome.github.io/posts/1549-the-most-recent-orders-for-each-product/</link>
      <pubDate>Mon, 05 Oct 2020 13:32:13 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1549-the-most-recent-orders-for-each-product/</guid>
      <description>LC 1549 the Most Recent Orders for Each Product Write an SQL query to find the most recent order(s) of each product. Return the result table sorted by product_name in ascending order and in case of a tie by the product_id in ascending order. If there still a tie, order them by the order_id in ascending order. Customers +-------------+-----------+ | customer_id | name | +-------------+-----------+ | 1 | Winston |</description>
    </item>
    
    <item>
      <title>1527 Patients With a Condition</title>
      <link>https://foxisawesome.github.io/posts/1527-patients-with-a-condition/</link>
      <pubDate>Mon, 05 Oct 2020 13:31:51 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1527-patients-with-a-condition/</guid>
      <description>LC 1527 Patients With a Condition   Write an SQL query to report the patient_id, patient_name all conditions of patients who have Type I Diabetes. Type I Diabetes always starts with DIAB1 prefix
Return the result table in any order.
Patients +------------+--------------+--------------+ | patient_id | patient_name | conditions | +------------+--------------+--------------+ | 1 | Daniel | YFEV COUGH | | 2 | Alice | | | 3 | Bob | DIAB100 MYOP | | 4 | George | ACNE DIAB100 | | 5 | Alain | DIAB201 | +------------+--------------+--------------+ Result table: +------------+--------------+--------------+ | patient_id | patient_name | conditions | +------------+--------------+--------------+ | 3 | Bob | DIAB100 MYOP | | 4 | George | ACNE DIAB100 | +------------+--------------+--------------+ Bob and George both have a condition that starts with DIAB1.</description>
    </item>
    
    <item>
      <title>1468 Calculate Salaries</title>
      <link>https://foxisawesome.github.io/posts/1468-calculate-salaries/</link>
      <pubDate>Mon, 05 Oct 2020 13:31:33 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1468-calculate-salaries/</guid>
      <description>LC 1468 Calculate Salaries Write an SQL query to find the salaries of the employees after applying taxes. The tax rate is calculated for each company based on the following criteria: 0% If the max salary of any employee in the company is less than 1000$. 24% If the max salary of any employee in the company is in the range [1000, 10000] inclusive. 49% If the max salary of</description>
    </item>
    
    <item>
      <title>1459 Rectangles Area</title>
      <link>https://foxisawesome.github.io/posts/1459-rectangles-area/</link>
      <pubDate>Mon, 05 Oct 2020 13:31:17 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1459-rectangles-area/</guid>
      <description>LC 1459 Rectangles Area Write an SQL query to report of all possible rectangles which can be formed by any two points of the table. Each row in the result contains three columns (p1, p2, area) where: p1 and p2 are the id of two opposite corners of a rectangle and p1 &amp;lt; p2. Area of this rectangle is represented by the column area. Report the query in descending order</description>
    </item>
    
    <item>
      <title>107 Binary Tree Level Order Traversal II</title>
      <link>https://foxisawesome.github.io/posts/107-binary-tree-level-order-traversal-ii/</link>
      <pubDate>Mon, 05 Oct 2020 10:06:12 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/107-binary-tree-level-order-traversal-ii/</guid>
      <description>LC 107 Binary Tree Level Order Traversal II Given a binary tree, return the bottom-up level order traversal of its nodes&#39; values. (ie, from left to right, level by level from leaf to root). For example: Given binary tree [3,9,20,null,null,15,7], 3 / \ 9 20 / \ 15 7 return its bottom-up level order traversal as: [ [15,7], [9,20], [3] ] Solution 2020-10-05 Notes: 学习了 负雪明</description>
    </item>
    
    <item>
      <title>1454 Active Users</title>
      <link>https://foxisawesome.github.io/posts/1454-active-users/</link>
      <pubDate>Sun, 04 Oct 2020 21:18:04 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1454-active-users/</guid>
      <description>LC 1454 Active Users Write an SQL query to find the id and the name of active users. Active users are those who logged in to their accounts for 5 or more consecutive days. Return the result table ordered by the id. The query result format is in the following example: Accounts table: +----+----------+ | id | name | +----+----------+ | 1 | Winston | | 7 | Jonathan |</description>
    </item>
    
    <item>
      <title>579 Find Cumulative Salary of an Employee</title>
      <link>https://foxisawesome.github.io/posts/579-find-cumulative-salary-of-an-employee/</link>
      <pubDate>Sun, 04 Oct 2020 21:05:57 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/579-find-cumulative-salary-of-an-employee/</guid>
      <description>LC 579 Find Cumulative Salary of an Employee The Employee table holds the salary information in a year. Write a SQL to get the cumulative sum of an employee&amp;rsquo;s salary over a period of 3 months but exclude the most recent month. The result should be displayed by &amp;lsquo;Id&amp;rsquo; ascending, and then by &amp;lsquo;Month&amp;rsquo; descending. Example Input | Id | Month | Salary | |----|-------|--------| | 1 | 1 |</description>
    </item>
    
    <item>
      <title>1075 Project Employees I</title>
      <link>https://foxisawesome.github.io/posts/1075-project-employees-i/</link>
      <pubDate>Sun, 04 Oct 2020 20:55:17 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1075-project-employees-i/</guid>
      <description>LC 1075 Project Employees I   Write an SQL query that reports the average experience years of all the employees for each project, rounded to 2 digits.
The query result format is in the following example:
Project table: +-------------+-------------+ | project_id | employee_id | +-------------+-------------+ | 1 | 1 | | 1 | 2 | | 1 | 3 | | 2 | 1 | | 2 | 4 | +-------------+-------------+ Employee table: +-------------+--------+------------------+ | employee_id | name | experience_years | +-------------+--------+------------------+ | 1 | Khaled | 3 | | 2 | Ali | 2 | | 3 | John | 1 | | 4 | Doe | 2 | +-------------+--------+------------------+ Result table: +-------------+---------------+ | project_id | average_years | +-------------+---------------+ | 1 | 2.</description>
    </item>
    
    <item>
      <title>620 Not Boring Movies</title>
      <link>https://foxisawesome.github.io/posts/620-not-boring-movies/</link>
      <pubDate>Sun, 04 Oct 2020 20:51:14 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/620-not-boring-movies/</guid>
      <description>LC 620 Not Boring Movies   X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.
Please write a SQL query to output movies with an odd numbered ID and a description that is not &amp;lsquo;boring&amp;rsquo;. Order the result by rating.
 Solution 2020-10-04 Notes: SELECT * FROM cinema WHERE id % 2 = 1 AND description !</description>
    </item>
    
    <item>
      <title>137 Single Number II</title>
      <link>https://foxisawesome.github.io/posts/137-single-number-ii/</link>
      <pubDate>Sun, 04 Oct 2020 20:43:36 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/137-single-number-ii/</guid>
      <description>LC 137 Single Number II Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? Input: [2,2,3,2] Output: 3 Input: [0,1,0,1,0,1,99] Output: 99 Solution 2020-10-04 Notes: 因为确定那个特殊值只出现一次，</description>
    </item>
    
    <item>
      <title>130 Surrounded Regions</title>
      <link>https://foxisawesome.github.io/posts/130-surrounded-regions/</link>
      <pubDate>Sun, 04 Oct 2020 20:34:29 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/130-surrounded-regions/</guid>
      <description>LC 130 Surrounded Regions Given a 2D board containing &#39;X&#39; and &#39;O&#39; (the letter O), capture all regions surrounded by &#39;X&#39;. A region is captured by flipping all &#39;O&#39;s into &#39;X&#39;s in that surrounded region. Example: X X X X X O O X X X O X X O X X After running your function, the board should be: X X X X X X X X X X</description>
    </item>
    
    <item>
      <title>108 Convert Sorted Array to Binary Search Tree</title>
      <link>https://foxisawesome.github.io/posts/108-convert-sorted-array-to-binary-search-tree/</link>
      <pubDate>Sun, 04 Oct 2020 16:08:38 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/108-convert-sorted-array-to-binary-search-tree/</guid>
      <description>LC 108 Convert Sorted Array to Binary Search Tree Given an array where elements are sorted in ascending order, convert it to a height balanced BST. For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. Given the sorted array: [-10,-3,0,5,9], One possible answer is: [0,-3,9,-10,null,5], which represents the following</description>
    </item>
    
    <item>
      <title>120 Triangle</title>
      <link>https://foxisawesome.github.io/posts/120-triangle/</link>
      <pubDate>Sun, 04 Oct 2020 16:00:01 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/120-triangle/</guid>
      <description>LC 120 Triangle Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below. For example, given the following triangle [ [2], [3,4], [6,5,7], [4,1,8,3] ] The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11). Note: Bonus point if you are able to do this using</description>
    </item>
    
  </channel>
</rss>
