<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sort on Q. Weng</title>
    <link>https://foxisawesome.github.io/tags/sort/</link>
    <description>Recent content in sort on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 03 Nov 2020 10:15:17 -0500</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/tags/sort/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>339 Nested List Weight Sum</title>
      <link>https://foxisawesome.github.io/posts/339-nested-list-weight-sum/</link>
      <pubDate>Thu, 01 Oct 2020 15:49:03 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/339-nested-list-weight-sum/</guid>
      <description>LC 339 Nested List Weight Sum Given a nested list of integers, return the sum of all integers in the list weighted by their depth. Each element is either an integer, or a list &amp;ndash; whose elements may also be integers or other lists. Example 1: Input: [[1,1],2,[1,1]] Output: 10 Explanation: Four 1&#39;s at depth 2, one 2 at depth 1. Example 2: Input: [1,[4,[6]]] Output: 27 Explanation: One 1</description>
    </item>
    
    <item>
      <title>224 Basic Calculator</title>
      <link>https://foxisawesome.github.io/posts/224-basic-calculator/</link>
      <pubDate>Thu, 01 Oct 2020 14:11:32 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/224-basic-calculator/</guid>
      <description>LC 224 Basic Calculator mplement a basic calculator to evaluate a simple expression string. The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces ``. Input: &amp;quot;(1+(4+5+2)-3)+(6+8)&amp;quot; Output: 23 Solution 2020-10-01 Notes: Calculator 3 题：LC 224, LC 227, LC 772 都好难。三题的解法大同小异，</description>
    </item>
    
    <item>
      <title>356 Line Reflection</title>
      <link>https://foxisawesome.github.io/posts/356-line-reflection/</link>
      <pubDate>Thu, 01 Oct 2020 13:21:41 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/356-line-reflection/</guid>
      <description>LC 356 Line Reflection Given n points on a 2D plane, find if there is such a line parallel to y-axis that reflect the given points symmetrically, in other words, answer whether or not if there exists a line that after reflecting all points over the given line the set of the original points is the same that the reflected ones. Note that there can be repeated points. Solution 2020-10-01</description>
    </item>
    
    <item>
      <title>772 Basic Calculator III</title>
      <link>https://foxisawesome.github.io/posts/772-basic-calculator-iii/</link>
      <pubDate>Thu, 01 Oct 2020 11:38:24 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/772-basic-calculator-iii/</guid>
      <description>LC 772 Basic Calculator III Implement a basic calculator to evaluate a simple expression string. The expression string contains only non-negative integers, +, -, *, / operators , open ( and closing parentheses ) and empty spaces ``. The integer division should truncate toward zero. You may assume that the given expression is always valid. All intermediate results will be in the range of [-2147483648, 2147483647]. Follow up: Could you</description>
    </item>
    
    <item>
      <title>1369 Get the Second Most Recent Activity</title>
      <link>https://foxisawesome.github.io/posts/1369-get-the-second-most-recent-activity/</link>
      <pubDate>Wed, 30 Sep 2020 22:20:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1369-get-the-second-most-recent-activity/</guid>
      <description>LC 1369 Get the Second Most Recent Activity   Write an SQL query to show the second most recent activity of each user.
If the user only has one activity, return that one.
A user can&amp;rsquo;t perform more than one activity at the same time. Return the result table in any order.
 Solution 2020-09-30 Notes:  straightforward by problem description.  SELECT username, activity, startDate, endDate FROM ( SELECT username, activity, startDate, endDate, ROW_NUMBER() OVER(PARTITION BY username ORDER BY startdate DESC) AS nr, COUNT(*) OVER(PARTITION BY username) AS ct FROM userActivity ) a WHERE nr=2 OR ct=1  </description>
    </item>
    
    <item>
      <title>585 Investments in 2016</title>
      <link>https://foxisawesome.github.io/posts/585-investments-in-2016/</link>
      <pubDate>Wed, 30 Sep 2020 21:31:10 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/585-investments-in-2016/</guid>
      <description>LC 585 Investments in 2016 Write a query to print the sum of all total investment values in 2016 (TIV_2016), to a scale of 2 decimal places, for all policy holders who meet the following criteria: Have the same TIV_2015 value as one or more other policyholders. Are not located in the same city as any other policyholder (i.e.: the (latitude, longitude) attribute pairs must be unique). Sample Input |</description>
    </item>
    
    <item>
      <title>1355 Activity Participants</title>
      <link>https://foxisawesome.github.io/posts/1355-activity-participants/</link>
      <pubDate>Wed, 30 Sep 2020 20:59:04 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1355-activity-participants/</guid>
      <description>LC 1355 Activity Participants Write an SQL query to find the names of all the activities with neither maximum, nor minimum number of participants. Return the result table in any order. Each activity in table Activities is performed by any person in the table Friends. The query result format is in the following example: Friends table: +------+--------------+---------------+ | id | name | activity | +------+--------------+---------------+ | 1 | Jonathan D.</description>
    </item>
    
    <item>
      <title>227 Basic Calculator II</title>
      <link>https://foxisawesome.github.io/posts/227-basic-calculator-ii/</link>
      <pubDate>Wed, 30 Sep 2020 14:32:48 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/227-basic-calculator-ii/</guid>
      <description>LC 227 Basic Calculator II Implement a basic calculator to evaluate a simple expression string. The expression string contains only non-negative integers, +, -, *, / operators and empty spaces ``. The integer division should truncate toward zero. Input: &amp;quot;3+2*2&amp;quot; Output: 7 Solution 2020-09-30 Notes: Calculator 3 题：LC 224, LC 227, LC 772 都好难。三题的解法大同小异，</description>
    </item>
    
    <item>
      <title>76 Minimum Window Substring</title>
      <link>https://foxisawesome.github.io/posts/76-minimum-window-substring/</link>
      <pubDate>Wed, 30 Sep 2020 13:00:41 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/76-minimum-window-substring/</guid>
      <description>LC 76 Minimum Window Substring Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n). Input: S = &amp;quot;ADOBECODEBANC&amp;quot;, T = &amp;quot;ABC&amp;quot; Output: &amp;quot;BANC&amp;quot; Solution 2020-09-30 Notes: sliding window 的同时，需要online update minimum length，并用一个d</description>
    </item>
    
    <item>
      <title>728 Self Dividing Numbers</title>
      <link>https://foxisawesome.github.io/posts/728-self-dividing-numbers/</link>
      <pubDate>Tue, 29 Sep 2020 21:32:36 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/728-self-dividing-numbers/</guid>
      <description>LC 728 Self Dividing Numbers A self-dividing number is a number that is divisible by every digit it contains. For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0. Also, a self-dividing number is not allowed to contain the digit zero. Given a lower and upper number bound, output a list of every possible self dividing</description>
    </item>
    
    <item>
      <title>793 Preimage Size of Factorial Zeroes Function</title>
      <link>https://foxisawesome.github.io/posts/793-preimage-size-of-factorial-zeroes-function/</link>
      <pubDate>Tue, 29 Sep 2020 21:17:24 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/793-preimage-size-of-factorial-zeroes-function/</guid>
      <description>LC 793 Preimage Size of Factorial Zeroes Function Let f(x) be the number of zeroes at the end of x!. (Recall that x! = 1 * 2 * 3 * ... * x, and by convention, 0! = 1.) For example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has 2 zeroes at the end. Given K,</description>
    </item>
    
    <item>
      <title>172 Factorial Trailing Zeroes</title>
      <link>https://foxisawesome.github.io/posts/172-factorial-trailing-zeroes/</link>
      <pubDate>Tue, 29 Sep 2020 20:24:36 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/172-factorial-trailing-zeroes/</guid>
      <description>LC 172 Factorial Trailing Zeroes Given an integer n, return the number of trailing zeroes in n!. Follow up: Could you write a solution that works in logarithmic time complexity? Solution 2020-09-29 Notes: count N 中有几个5, 就一定有几个0. 这个写法很高级。相当于 5 分法，所以time</description>
    </item>
    
    <item>
      <title>1288 Remove Covered Intervals</title>
      <link>https://foxisawesome.github.io/posts/1288-remove-covered-intervals/</link>
      <pubDate>Tue, 29 Sep 2020 20:01:38 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1288-remove-covered-intervals/</guid>
      <description>LC 1288 Remove Covered Intervals Given a list of intervals, remove all intervals that are covered by another interval in the list. Interval [a,b) is covered by interval [c,d) if and only if c &amp;lt;= a and b &amp;lt;= d. After doing so, return the number of remaining intervals. Input: intervals = [[1,4],[3,6],[2,8]] Output: 2 Explanation: Interval [3,6] is covered by [2,8], therefore it is removed. Solution 2020-09-29 Notes: 排</description>
    </item>
    
    <item>
      <title>1113 Reported Posts</title>
      <link>https://foxisawesome.github.io/posts/1113-reported-posts/</link>
      <pubDate>Tue, 29 Sep 2020 19:04:24 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1113-reported-posts/</guid>
      <description>LC 1113 Reported Posts   Write an SQL query that reports the number of posts reported yesterday for each report reason. Assume today is 2019-07-05.
 Solution 2020-09-29 Notes: SELECT report_reason, report_count FROM ( SELECT extra as report_reason, COUNT(*) as report_count FROM ( SELECT DISTINCT post_id, extra FROM actions WHERE DATEDIFF(&#39;2019-07-05&#39;,action_date)=1 AND action = &#39;report&#39; ) a GROUP BY 1 ) b WHERE report_reason IS NOT NULL ;  </description>
    </item>
    
    <item>
      <title>1045 Customers Who Bought All Products</title>
      <link>https://foxisawesome.github.io/posts/1045-customers-who-bought-all-products/</link>
      <pubDate>Tue, 29 Sep 2020 14:12:22 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1045-customers-who-bought-all-products/</guid>
      <description>LC 1045 Customers Who Bought All Products   Write an SQL query for a report that provides the customer ids from the Customer table that bought all the products in the Product table.
 Solution 2020-09-29 Notes: SELECT customer_id FROM ( SELECT customer_id, COUNT(DISTINCT product_key) AS ct FROM customer GROUP BY customer_id ORDER BY 1 ) a WHERE ct = (SELECT COUNT(*) from product) ORDER BY 1 ;  </description>
    </item>
    
    <item>
      <title>627 Swap Salary</title>
      <link>https://foxisawesome.github.io/posts/627-swap-salary/</link>
      <pubDate>Tue, 29 Sep 2020 13:54:07 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/627-swap-salary/</guid>
      <description>LC 627 Swap Salary   SQL Schema
Given a table salary, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update statement and no intermediate temp table.
Note that you must write a single update statement, DO NOT write any select statement for this problem.
 Solution 2020-09-29 Notes:  UPDATE statement.</description>
    </item>
    
    <item>
      <title>577 Employee Bonus</title>
      <link>https://foxisawesome.github.io/posts/577-employee-bonus/</link>
      <pubDate>Tue, 29 Sep 2020 13:49:21 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/577-employee-bonus/</guid>
      <description>LC 577 Employee Bonus   Select all employee&amp;rsquo;s name and bonus whose bonus is &amp;lt; 1000.
Table:Employee
+-------+--------+-----------+--------+ | empId | name | supervisor| salary | +-------+--------+-----------+--------+ | 1 | John | 3 | 1000 | | 2 | Dan | 3 | 2000 | | 3 | Brad | null | 4000 | | 4 | Thomas | 3 | 4000 | +-------+--------+-----------+--------+ empId is the primary key column for this table.</description>
    </item>
    
    <item>
      <title>574 Winning Candidate</title>
      <link>https://foxisawesome.github.io/posts/574-winning-candidate/</link>
      <pubDate>Tue, 29 Sep 2020 13:40:03 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/574-winning-candidate/</guid>
      <description>LC 574 Winning Candidate Write a sql to find the name of the winning candidate, the above example will return the winner B. Solution 2020-09-29 Notes: 先 group by, 在 order by 里放 aggregation function SELECT name FROM candidate WHERE id = ( SELECT candidateid FROM vote GROUP BY candidateid ORDER BY COUNT(*) DESC LIMIT 1 ) 2020-10-14 Notes: Window function + aggregation function SELECT name FROM candidate a</description>
    </item>
    
    <item>
      <title>534 Game Play Analysis III</title>
      <link>https://foxisawesome.github.io/posts/534-game-play-analysis-iii/</link>
      <pubDate>Tue, 29 Sep 2020 13:30:11 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/534-game-play-analysis-iii/</guid>
      <description>LC 534 Game Play Analysis III   Write an SQL query that reports for each player and date, how many games played so far by the player. That is, the total number of games played by the player until that date. Check the example for clarity.
The query result format is in the following example:
Activity table: +-----------+-----------+------------+--------------+ | player_id | device_id | event_date | games_played | +-----------+-----------+------------+--------------+ | 1 | 2 | 2016-03-01 | 5 | | 1 | 2 | 2016-05-02 | 6 | | 1 | 3 | 2017-06-25 | 1 | | 3 | 1 | 2016-03-02 | 0 | | 3 | 4 | 2018-07-03 | 5 | +-----------+-----------+------------+--------------+ Result table: +-----------+------------+---------------------+ | player_id | event_date | games_played_so_far | +-----------+------------+---------------------+ | 1 | 2016-03-01 | 5 | | 1 | 2016-05-02 | 11 | | 1 | 2017-06-25 | 12 | | 3 | 2016-03-02 | 0 | | 3 | 2018-07-03 | 5 | +-----------+------------+---------------------+   Solution 2020-09-29 Notes:  SUM() OVER(ORDER BY) gives cumulative results.</description>
    </item>
    
    <item>
      <title>567 Permutation in String</title>
      <link>https://foxisawesome.github.io/posts/567-permutation-in-string/</link>
      <pubDate>Tue, 29 Sep 2020 13:02:26 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/567-permutation-in-string/</guid>
      <description>LC 567 Permutation in String Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string&amp;rsquo;s permutations is the substring of the second string. Input: s1 = &amp;quot;ab&amp;quot; s2 = &amp;quot;eidbaooo&amp;quot; Output: True Explanation: s2 contains one permutation of s1 (&amp;quot;ba&amp;quot;). Solution 2020-09-29 Notes: 这题用了slidin</description>
    </item>
    
  </channel>
</rss>
