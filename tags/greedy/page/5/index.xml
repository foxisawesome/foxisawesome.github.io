<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>greedy on Q. Weng</title>
    <link>https://foxisawesome.github.io/tags/greedy/</link>
    <description>Recent content in greedy on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 02 Nov 2020 13:42:31 -0500</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/tags/greedy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>723 Candy Crush</title>
      <link>https://foxisawesome.github.io/posts/723-candy-crush/</link>
      <pubDate>Sun, 18 Oct 2020 19:33:47 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/723-candy-crush/</guid>
      <description>LC 723 Candy Crush This question is about implementing a basic elimination algorithm for Candy Crush. Given a 2D integer array board representing the grid of candy, different positive integers board[i][j] represent different types of candies. A value of board[i][j] = 0 represents that the cell at position (i, j) is empty. The given board represents the state of the game following the player&amp;rsquo;s move. Now, you need to restore</description>
    </item>
    
    <item>
      <title>1470 Shuffle the Array</title>
      <link>https://foxisawesome.github.io/posts/1470-shuffle-the-array/</link>
      <pubDate>Sun, 18 Oct 2020 15:22:00 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1470-shuffle-the-array/</guid>
      <description>LC 1470 Shuffle the Array Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn]. Return the array in the form [x1,y1,x2,y2,...,xn,yn]. Solution 2020-10-18 Notes: 不能这么写 [i,j for i, j in zip(nums[:n],nums[n:])] class Solution: def shuffle(self, nums: List[int], n: int) -&amp;gt; List[int]: ans = [] for i, j in zip(nums[:n], nums[n:]): ans += [i] + [j] return ans # Time O(N) # Space O(N)</description>
    </item>
    
    <item>
      <title>1431 Kids With the Greatest Number of Candies</title>
      <link>https://foxisawesome.github.io/posts/1431-kids-with-the-greatest-number-of-candies/</link>
      <pubDate>Sun, 18 Oct 2020 15:12:18 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1431-kids-with-the-greatest-number-of-candies/</guid>
      <description>LC 1431 Kids With the Greatest Number of Candies Given the array candies and the integer extraCandies, where candies[i] represents the number of candies that the *ith* kid has. For each kid check if there is a way to distribute extraCandies among the kids such that he or she can have the greatest number of candies among them. Notice that multiple kids can have the greatest number of candies. Input:</description>
    </item>
    
    <item>
      <title>1480 Running Sum of 1d Array</title>
      <link>https://foxisawesome.github.io/posts/1480-running-sum-of-1d-array/</link>
      <pubDate>Sun, 18 Oct 2020 15:05:05 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1480-running-sum-of-1d-array/</guid>
      <description>LC 1480 Running Sum of 1d Array Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]). Return the running sum of nums. Solution 2020-10-18 Notes: Pre-sum. 秒了 class Solution: def runningSum(self, nums: List[int]) -&amp;gt; List[int]: if not nums: return [] n =</description>
    </item>
    
    <item>
      <title>1119 Remove Vowels From a String</title>
      <link>https://foxisawesome.github.io/posts/1119-remove-vowels-from-a-string/</link>
      <pubDate>Sun, 18 Oct 2020 15:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1119-remove-vowels-from-a-string/</guid>
      <description>LC 1119 Remove Vowels From a String Given a string S, remove the vowels &#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, and &#39;u&#39; from it, and return the new string. Solution 2020-10-18 Notes: 秒了 class Solution: def removeVowels(self, S: str) -&amp;gt; str: v = set([&#39;a&#39;,&#39;e&#39;,&#39;i&#39;,&#39;o&#39;,&#39;u&#39;]) ans = [] for s in S: if s not in v: ans.append(s) return &#39;&#39;.join(ans) # Time O(N) # Space O(N)</description>
    </item>
    
    <item>
      <title>1342 Number of Steps to Reduce a Number to Zero</title>
      <link>https://foxisawesome.github.io/posts/1342-number-of-steps-to-reduce-a-number-to-zero/</link>
      <pubDate>Sun, 18 Oct 2020 14:58:02 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1342-number-of-steps-to-reduce-a-number-to-zero/</guid>
      <description>LC 1342 Number of Steps to Reduce a Number to Zero Given a non-negative integer num, return the number of steps to reduce it to zero. If the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it. Input: num = 14 Output: 6 Explanation: Step 1) 14 is even; divide by 2 and obtain 7. Step 2) 7 is odd;</description>
    </item>
    
    <item>
      <title>1141 User Activity for the Past 30 Days I</title>
      <link>https://foxisawesome.github.io/posts/1141-user-activity-for-the-past-30-days-i/</link>
      <pubDate>Sat, 17 Oct 2020 21:13:03 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1141-user-activity-for-the-past-30-days-i/</guid>
      <description>LC 1141 User Activity for the Past 30 Days I Write an SQL query to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. A user was active on some day if he/she made at least one activity on that day. The query result format is in the following example: Activity table: +---------+------------+---------------+---------------+ | user_id | session_id | activity_date | activity_type | +---------+------------+---------------+---------------+ |</description>
    </item>
    
    <item>
      <title>1623 All Valid Triplets That Can Represent a Country</title>
      <link>https://foxisawesome.github.io/posts/1623-all-valid-triplets-that-can-represent-a-country/</link>
      <pubDate>Sat, 17 Oct 2020 21:10:35 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1623-all-valid-triplets-that-can-represent-a-country/</guid>
      <description>LC 1623 All Valid Triplets That Can Represent a Country   Write an SQL query to find all the possible triplets representing the country under the given constraints.
Return the result table in any order.
The query result format is in the following example.
SchoolA table: +------------+--------------+ | student_id | student_name | +------------+--------------+ | 1 | Alice | | 2 | Bob | +------------+--------------+ SchoolB table: +------------+--------------+ | student_id | student_name | +------------+--------------+ | 3 | Tom | +------------+--------------+ SchoolC table: +------------+--------------+ | student_id | student_name | +------------+--------------+ | 3 | Tom | | 2 | Jerry | | 10 | Alice | +------------+--------------+ Result table: +----------+----------+----------+ | member_A | member_B | member_C | +----------+----------+----------+ | Alice | Tom | Jerry | | Bob | Tom | Alice | +----------+----------+----------+ Let us see all the possible triplets.</description>
    </item>
    
    <item>
      <title>1159 Market Analysis II</title>
      <link>https://foxisawesome.github.io/posts/1159-market-analysis-ii/</link>
      <pubDate>Sat, 17 Oct 2020 20:54:12 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1159-market-analysis-ii/</guid>
      <description>LC 1159 Market Analysis II Write an SQL query to find for each user, whether the brand of the second item (by date) they sold is their favorite brand. If a user sold less than two items, report the answer for that user as no. It is guaranteed that no seller sold more than one item on a day. The query result format is in the following example: Users table:</description>
    </item>
    
    <item>
      <title>1517 Find Users With Valid E-Mails</title>
      <link>https://foxisawesome.github.io/posts/1517-find-users-with-valid-e-mails/</link>
      <pubDate>Sat, 17 Oct 2020 20:29:16 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1517-find-users-with-valid-e-mails/</guid>
      <description>LC 1517 Find Users With Valid E-Mails   Write an SQL query to find the users who have valid emails.
A valid e-mail has a prefix name and a domain where:
 The prefix name is a string that may contain letters (upper or lower case), digits, underscore &#39;_&#39;, period &#39;.&#39; and/or dash &#39;-&#39;. The prefix name must start with a letter. The domain is &#39;@leetcode.com&#39;.  Return the result table in any order.</description>
    </item>
    
    <item>
      <title>1511 Customer Order Frequency</title>
      <link>https://foxisawesome.github.io/posts/1511-customer-order-frequency/</link>
      <pubDate>Sat, 17 Oct 2020 20:18:00 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1511-customer-order-frequency/</guid>
      <description>LC 1511 Customer Order Frequency Write an SQL query to report the customer_id and customer_name of customers who have spent at least $100 in each month of June and July 2020. Return the result table in any order. The query result format is in the following example. Customers +--------------+-----------+-------------+ | customer_id | name | country | +--------------+-----------+-------------+ | 1 | Winston | USA | | 2 | Jonathan | Peru</description>
    </item>
    
    <item>
      <title>1479 Sales by Day of the Week</title>
      <link>https://foxisawesome.github.io/posts/1479-sales-by-day-of-the-week/</link>
      <pubDate>Fri, 16 Oct 2020 09:29:59 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1479-sales-by-day-of-the-week/</guid>
      <description>LC 1479 Sales by Day of the Week   Write an SQL query to report how many units in each category have been ordered on each day of the week.
Return the result table ordered by category.
 Solution 2020-10-16 Notes:  DAYOFWEEK() : ‘2’ is Mon. MYSQL does not have pivot function, use below template  WITH combo AS ( SELECT b.*, DAYOFWEEK(order_date) AS week, item_category FROM items a LEFT JOIN orders b ON a.</description>
    </item>
    
    <item>
      <title>615 Average Salary Departments vs Company</title>
      <link>https://foxisawesome.github.io/posts/615-average-salary-departments-vs-company/</link>
      <pubDate>Fri, 16 Oct 2020 09:08:36 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/615-average-salary-departments-vs-company/</guid>
      <description>LC 615 Average Salary Departments vs Company Given two tables as below, write a query to display the comparison result (higher/lower/same) of the average salary of employees in a department to the company&amp;rsquo;s average salary. Table: salary | id | employee_id | amount | pay_date | |----|-------------|--------|------------| | 1 | 1 | 9000 | 2017-03-31 | | 2 | 2 | 6000 | 2017-03-31 | | 3 | 3 |</description>
    </item>
    
    <item>
      <title>1024 Video Stitching</title>
      <link>https://foxisawesome.github.io/posts/1024-video-stitching/</link>
      <pubDate>Thu, 15 Oct 2020 12:03:45 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1024-video-stitching/</guid>
      <description>LC 1024 Video Stitching You are given a series of video clips from a sporting event that lasted T seconds. These video clips can be overlapping with each other and have varied lengths. Each video clip clips[i] is an interval: it starts at time clips[i][0] and ends at time clips[i][1]. We can cut these clips into segments freely: for example, a clip [0, 7] can be cut into segments [0,</description>
    </item>
    
    <item>
      <title>452 Minimum Number of Arrows to Burst Balloons</title>
      <link>https://foxisawesome.github.io/posts/452-minimum-number-of-arrows-to-burst-balloons/</link>
      <pubDate>Thu, 15 Oct 2020 10:20:23 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/452-minimum-number-of-arrows-to-burst-balloons/</guid>
      <description>LC 452 Minimum Number of Arrows to Burst Balloons There are some spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it&amp;rsquo;s horizontal, y-coordinates don&amp;rsquo;t matter, and hence the x-coordinates of start and end of the diameter suffice. The start is always smaller than the end. An arrow can be shot up exactly vertically from different points</description>
    </item>
    
    <item>
      <title>435 Non Overlapping Intervals</title>
      <link>https://foxisawesome.github.io/posts/435-non-overlapping-intervals/</link>
      <pubDate>Thu, 15 Oct 2020 10:04:00 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/435-non-overlapping-intervals/</guid>
      <description>LC 435 Non Overlapping Intervals Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping. Input: [[1,2],[2,3],[3,4],[1,3]] Output: 1 Explanation: [1,3] can be removed and the rest of intervals are non-overlapping. Solution 2020-10-15 Notes: Greedy 算法解决的一类 区间问题。 这题的思路是，先把每</description>
    </item>
    
    <item>
      <title>613 Shortest Distance in a Line</title>
      <link>https://foxisawesome.github.io/posts/613-shortest-distance-in-a-line/</link>
      <pubDate>Wed, 14 Oct 2020 19:50:34 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/613-shortest-distance-in-a-line/</guid>
      <description>LC 613 Shortest Distance in a Line   Table point holds the x coordinate of some points on x-axis in a plane, which are all integers.
Write a query to find the shortest distance between two points in these points.
| x | |-----| | -1 | | 0 | | 2 |  The shortest distance is &amp;lsquo;1&amp;rsquo; obviously, which is from point &amp;lsquo;-1&amp;rsquo; to &amp;lsquo;0&amp;rsquo;. So the output is as below:</description>
    </item>
    
    <item>
      <title>603 Consecutive Available Seats</title>
      <link>https://foxisawesome.github.io/posts/603-consecutive-available-seats/</link>
      <pubDate>Wed, 14 Oct 2020 19:47:16 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/603-consecutive-available-seats/</guid>
      <description>LC 603 Consecutive Available Seats   Several friends at a cinema ticket office would like to reserve consecutive available seats. Can you help to query all the consecutive available seats order by the seat_id using the following cinema table?
| seat_id | free | |---------|------| | 1 | 1 | | 2 | 0 | | 3 | 1 | | 4 | 1 | | 5 | 1 |  Your query should return the following result for the sample case above.</description>
    </item>
    
    <item>
      <title>602 Friend Requests Ii Who Has the Most Friends</title>
      <link>https://foxisawesome.github.io/posts/602-friend-requests-ii-who-has-the-most-friends/</link>
      <pubDate>Wed, 14 Oct 2020 19:41:14 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/602-friend-requests-ii-who-has-the-most-friends/</guid>
      <description>LC 602 Friend Requests Ii Who Has the Most Friends Write a query to find the the people who has most friends and the most friends number under the following rules: It is guaranteed there is only 1 people having the most friends. The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value. For the sample data above,</description>
    </item>
    
    <item>
      <title>974 Subarray Sums Divisible by K</title>
      <link>https://foxisawesome.github.io/posts/974-subarray-sums-divisible-by-k/</link>
      <pubDate>Wed, 14 Oct 2020 17:17:02 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/974-subarray-sums-divisible-by-k/</guid>
      <description>LC 974 Subarray Sums Divisible by K   Given an array A of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by K.
Input: A = [4,5,0,-2,-3,1], K = 5 Output: 7 Explanation: There are 7 subarrays with a sum divisible by K = 5: [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]   Solution 2020-10-14 Notes:  About the problems - sum of contiguous subarray , prefix sum is a common technique.</description>
    </item>
    
  </channel>
</rss>
