<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on Q. Weng</title>
    <link>https://foxisawesome.github.io/tags/leetcode/</link>
    <description>Recent content in leetcode on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Sep 2020 21:33:10 -0400</lastBuildDate>
    
	<atom:link href="https://foxisawesome.github.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>295 Find Median From Data Stream</title>
      <link>https://foxisawesome.github.io/posts/295-find-median-from-data-stream/</link>
      <pubDate>Tue, 01 Sep 2020 21:33:10 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/295-find-median-from-data-stream/</guid>
      <description>LC 295 Find Median From Data Stream   Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.
For example,
[2,3,4], the median is 3 [2,3], the median is (2 + 3) / 2 = 2.5  Solution 2020-09-01 Notes:
  Follow 了花花酱的solu#1。 python the heapq implementation is a bit messy, while involving max heapq.</description>
    </item>
    
    <item>
      <title>148 Sort List</title>
      <link>https://foxisawesome.github.io/posts/148-sort-list/</link>
      <pubDate>Tue, 01 Sep 2020 19:26:00 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/148-sort-list/</guid>
      <description>LC 148 Sort List   Sort a linked list in O(n log n) time using constant space complexity.
Example 1:
Input: 4-&amp;gt;2-&amp;gt;1-&amp;gt;3 Output: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4 Example 2:
Input: -1-&amp;gt;5-&amp;gt;3-&amp;gt;4-&amp;gt;0 Output: -1-&amp;gt;0-&amp;gt;3-&amp;gt;4-&amp;gt;5  Solution 2020-09-01 Notes:
 Time Complaxity O(nlogn) indicates merge sort algo. in the sortList, line 8:if not head or not head.next: return head actually returns head not None. slow and fast pointers to divide list into two need a lfet tail pointer: l_tail to cut off left linked list.</description>
    </item>
    
    <item>
      <title>79 Word Search</title>
      <link>https://foxisawesome.github.io/posts/79-word-search/</link>
      <pubDate>Tue, 01 Sep 2020 16:07:12 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/79-word-search/</guid>
      <description>LC 79 Word Search   Given a 2D board and a word, find if the word exists in the grid.
The word can be constructed from letters of sequentially adjacent cell, where &amp;ldquo;adjacent&amp;rdquo; cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.
Example:
board = [ [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;E&#39;], [&#39;S&#39;,&#39;F&#39;,&#39;C&#39;,&#39;S&#39;], [&#39;A&#39;,&#39;D&#39;,&#39;E&#39;,&#39;E&#39;] ] Given word = &amp;quot;ABCCED&amp;quot;, return true. Given word = &amp;quot;SEE&amp;quot;, return true.</description>
    </item>
    
    <item>
      <title>981 Time Based Key Value Store</title>
      <link>https://foxisawesome.github.io/posts/981-time-based-key-value-store/</link>
      <pubDate>Tue, 01 Sep 2020 14:15:51 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/981-time-based-key-value-store/</guid>
      <description>LC 981 Time Based Key Value Store   Create a timebased key-value store class TimeMap, that supports two operations.
 set(string key, string value, int timestamp)   Stores the key and value, along with the given timestamp.  get(string key, int timestamp)   Returns a value such that set(key, value, timestamp_prev) was called previously, with timestamp_prev &amp;lt;= timestamp. If there are multiple such values, it returns the one with the largest timestamp_prev.</description>
    </item>
    
    <item>
      <title>1197 Minimum Knight Moves</title>
      <link>https://foxisawesome.github.io/posts/1197-minimum-knight-moves/</link>
      <pubDate>Mon, 31 Aug 2020 22:24:46 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1197-minimum-knight-moves/</guid>
      <description>LC 1197 Minimum Knight Moves 
 In an infinite chess board with coordinates from -infinity to +infinity, you have a knight at square [0, 0].
A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.
Return the minimum number of steps needed to move the knight to the square [x, y]. It is guaranteed the answer exists.</description>
    </item>
    
    <item>
      <title>1041 Robot Bounded in Circle</title>
      <link>https://foxisawesome.github.io/posts/1041-robot-bounded-in-circle/</link>
      <pubDate>Mon, 31 Aug 2020 22:14:45 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1041-robot-bounded-in-circle/</guid>
      <description>LC 1041 Robot Bounded in Circle 
 On an infinite plane, a robot initially stands at (0, 0) and faces north. The robot can receive one of three instructions:
 &amp;quot;G&amp;quot;: go straight 1 unit; &amp;quot;L&amp;quot;: turn 90 degrees to the left; &amp;quot;R&amp;quot;: turn 90 degress to the right.  The robot performs the instructions given in order, and repeats them forever.
Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.</description>
    </item>
    
    <item>
      <title>957 Prison Cells</title>
      <link>https://foxisawesome.github.io/posts/957-prison-cells/</link>
      <pubDate>Mon, 31 Aug 2020 19:26:18 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/957-prison-cells/</guid>
      <description>LC 957 Prison Cells 
 There are 8 prison cells in a row, and each cell is either occupied or vacant.
Each day, whether the cell is occupied or vacant changes according to the following rules:
 If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied. Otherwise, it becomes vacant.  (Note that because the prison is a row, the first and the last cells in the row can&amp;rsquo;t have two adjacent neighbors.</description>
    </item>
    
    <item>
      <title>735 Aseroid Collision</title>
      <link>https://foxisawesome.github.io/posts/735-aseroid-collision/</link>
      <pubDate>Mon, 31 Aug 2020 19:05:25 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/735-aseroid-collision/</guid>
      <description>LC 735 Aseroid Collision 
 We are given an array asteroids of integers representing asteroids in a row.
For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.
Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode.</description>
    </item>
    
    <item>
      <title>1266 Minimum Time Visiting All Points</title>
      <link>https://foxisawesome.github.io/posts/1266-minimum-time-visiting-all-points/</link>
      <pubDate>Sun, 30 Aug 2020 21:24:22 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1266-minimum-time-visiting-all-points/</guid>
      <description>LC 1266
 On a plane there are n points with integer coordinates points[i] = [xi, yi]. Your task is to find the minimum time in seconds to visit all points.
You can move according to the next rules:
 In one second always you can either move vertically, horizontally by one unit or diagonally (it means to move one unit vertically and one unit horizontally in one second). You have to visit the points in the same order as they appear in the array.</description>
    </item>
    
    <item>
      <title>206 Reverse Linked List</title>
      <link>https://foxisawesome.github.io/posts/206-reverse-linked-list/</link>
      <pubDate>Sat, 01 Aug 2020 20:06:27 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/206-reverse-linked-list/</guid>
      <description>LC 206 Reverse Linked List   Reverse a singly linked list.
Example:
Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL  Solution 2020-09-01 Notes:
 这题刷了不下10遍了，终于明白iteration这里的四步操作了。 recursion的做法还是似懂非懂，还得再看看。感觉TreeNode, ListNode 的recursion 都是if not head/root: return head/root。 另外，recession 这里返回的是 以head.next为头reversed 的list，只需要再把head.next	 reverse 下就好了。  # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: # iteration def reverseList_iter(self, head: ListNode) -&amp;gt; ListNode: if not head: return None prev = None curr = head while curr: temp = curr.</description>
    </item>
    
  </channel>
</rss>