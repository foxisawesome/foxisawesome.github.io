<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode BST on Q. Weng</title>
    <link>https://foxisawesome.github.io/tags/leetcode-bst/</link>
    <description>Recent content in leetcode BST on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 30 Aug 2020 20:59:36 -0400</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/tags/leetcode-bst/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>215 Kth Largest Element in an Array</title>
      <link>https://foxisawesome.github.io/to_do/215-kth-largest-element-in-an-array/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/215-kth-largest-element-in-an-array/</guid>
      <description>LC 215 Kth Largest Element in an Array    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>22 Generate Parentheses</title>
      <link>https://foxisawesome.github.io/to_do/22-generate-parentheses/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/22-generate-parentheses/</guid>
      <description>LC 22 Generate Parentheses    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>239 Sliding Window Maximum</title>
      <link>https://foxisawesome.github.io/to_do/239-sliding-window-maximum/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/239-sliding-window-maximum/</guid>
      <description>LC 239 Sliding Window Maximum    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>279 Perfect Squares</title>
      <link>https://foxisawesome.github.io/to_do/279-perfect-squares/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/279-perfect-squares/</guid>
      <description>LC 279 Perfect Squares    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>283 Move Zeroes</title>
      <link>https://foxisawesome.github.io/to_do/283-move-zeroes/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/283-move-zeroes/</guid>
      <description>LC 283 Move Zeroes    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>322 Coin Change</title>
      <link>https://foxisawesome.github.io/to_do/322-coin-change/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/322-coin-change/</guid>
      <description>LC 322 Coin Change    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>4 Median of Two Sorted Arrays</title>
      <link>https://foxisawesome.github.io/to_do/4-median-of-two-sorted-arrays/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/4-median-of-two-sorted-arrays/</guid>
      <description>LC 4 Median of Two Sorted Arrays    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>416 Partition Equal Subset Sum</title>
      <link>https://foxisawesome.github.io/to_do/416-partition-equal-subset-sum/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/416-partition-equal-subset-sum/</guid>
      <description>LC 416 Partition Equal Subset Sum    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>509 Fibonacci Number</title>
      <link>https://foxisawesome.github.io/to_do/509-fibonacci-number/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/509-fibonacci-number/</guid>
      <description>LC 509 Fibonacci Number    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>516 Longest Palindromic Subsequence</title>
      <link>https://foxisawesome.github.io/to_do/516-longest-palindromic-subsequence/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/516-longest-palindromic-subsequence/</guid>
      <description>LC 516 Longest Palindromic Subsequence    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>523 Continuous Subarray Sum</title>
      <link>https://foxisawesome.github.io/to_do/523-continuous-subarray-sum/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/523-continuous-subarray-sum/</guid>
      <description>LC 523 Continuous Subarray Sum    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>651 4 Keys Keyboard</title>
      <link>https://foxisawesome.github.io/to_do/651-4-keys-keyboard/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/651-4-keys-keyboard/</guid>
      <description>LC 651 4 Keys Keyboard    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>76 Minimum Window Substring</title>
      <link>https://foxisawesome.github.io/to_do/76-minimum-window-substring/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/76-minimum-window-substring/</guid>
      <description>LC 76 Minimum Window Substring    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>83 Remove Duplicates From Sorted List</title>
      <link>https://foxisawesome.github.io/to_do/83-remove-duplicates-from-sorted-list/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:30 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/83-remove-duplicates-from-sorted-list/</guid>
      <description>LC 83 Remove Duplicates From Sorted List    Solution 2020-09-05T14:01:30-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>542 01 Matrix</title>
      <link>https://foxisawesome.github.io/to_do/542-01-matrix/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:29 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/542-01-matrix/</guid>
      <description>LC 542 01 Matrix    Solution 2020-09-05T14:01:29-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>131 Panlidrome Partitioning</title>
      <link>https://foxisawesome.github.io/to_do/131-panlidrome-partitioning/</link>
      <pubDate>Sat, 05 Sep 2020 09:55:31 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/131-panlidrome-partitioning/</guid>
      <description>LC 131 Panlidrome Partitioning    Solution 2020-09-05T09:55:31-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>212 Word Search Ii</title>
      <link>https://foxisawesome.github.io/to_do/212-word-search-ii/</link>
      <pubDate>Fri, 04 Sep 2020 20:11:54 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/to_do/212-word-search-ii/</guid>
      <description>LC 212 Word Search Ii    Solution 2020-09-04T20:11:54-04:00 Notes:
   # Time O() # Space O()  </description>
    </item>
    
    <item>
      <title>316 Remove Dup Letters</title>
      <link>https://foxisawesome.github.io/316-remove-dup-letters/</link>
      <pubDate>Fri, 04 Sep 2020 19:56:18 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/316-remove-dup-letters/</guid>
      <description>LC 316 Remove Dup Letters  Given a string which contains only lowercase letters, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.
Input: &amp;quot;cbacdcbc&amp;quot; Output: &amp;quot;acdb&amp;quot;   Solution 2020-09-04 Notes:
  Need one-pass of s to get the counter of each letter.
  a second pass, dial down counter at each iteration.</description>
    </item>
    
    <item>
      <title>1081 Smallest Subsequence of Distinct Char</title>
      <link>https://foxisawesome.github.io/1081-smallest-subsequence-of-distinct-char/</link>
      <pubDate>Fri, 04 Sep 2020 19:55:50 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/1081-smallest-subsequence-of-distinct-char/</guid>
      <description>LC 1081 Smallest Subsequence of Distinct Char   Return the lexicographically smallest subsequence of text that contains all the distinct characters of text exactly once.
Input: &amp;quot;ecbacba&amp;quot; Output: &amp;quot;eacb&amp;quot;   Solution 2020-09-04 Notes:
  Need one-pass of s to get the counter of each letter.
  a second pass, dial down counter at each iteration. use a stack to record every distinct letter and keep the order of recorded letter same as their orders in the string.</description>
    </item>
    
    <item>
      <title>80 Remove Dup From Sorted Array II</title>
      <link>https://foxisawesome.github.io/80-remove-dup-from-sorted-array-ii/</link>
      <pubDate>Fri, 04 Sep 2020 14:05:24 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/80-remove-dup-from-sorted-array-ii/</guid>
      <description>LC 80 Remove Dup From Sorted Array II   Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
Given nums = [0,0,1,1,1,1,2,3,3], output [0,0,1,1,2,3,3]   Solution 2020-09-04 Notes:
 Same thing as LC 26.  class Solution: def removeDuplicates(self, nums: List[int]) -&amp;gt; int: if not nums: return 0 count = dict() count[nums[0]] = 1 slow, fast = 0, 1 while fast &amp;lt; len(nums): count[nums[fast]] = count.</description>
    </item>
    
  </channel>
</rss>
