<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dia_sql on Q. Weng</title>
    <link>https://foxisawesome.github.io/tags/dia_sql/</link>
    <description>Recent content in dia_sql on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 29 Oct 2020 11:19:23 -0400</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/tags/dia_sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1041 Robot Bounded in Circle</title>
      <link>https://foxisawesome.github.io/posts/1041-robot-bounded-in-circle/</link>
      <pubDate>Mon, 31 Aug 2020 22:14:45 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1041-robot-bounded-in-circle/</guid>
      <description>LC 1041 Robot Bounded in Circle On an infinite plane, a robot initially stands at (0, 0) and faces north. The robot can receive one of three instructions: &amp;quot;G&amp;quot;: go straight 1 unit; &amp;quot;L&amp;quot;: turn 90 degrees to the left; &amp;quot;R&amp;quot;: turn 90 degress to the right. The robot performs the instructions given in order, and repeats them forever. Return true if and only if there exists a circle in</description>
    </item>
    
    <item>
      <title>957 Prison Cells</title>
      <link>https://foxisawesome.github.io/posts/957-prison-cells/</link>
      <pubDate>Mon, 31 Aug 2020 19:26:18 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/957-prison-cells/</guid>
      <description>LC 957 Prison Cells There are 8 prison cells in a row, and each cell is either occupied or vacant. Each day, whether the cell is occupied or vacant changes according to the following rules: If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied. Otherwise, it becomes vacant. (Note that because the prison is a row, the first and the</description>
    </item>
    
    <item>
      <title>735 Aseroid Collision</title>
      <link>https://foxisawesome.github.io/posts/735-aseroid-collision/</link>
      <pubDate>Mon, 31 Aug 2020 19:05:25 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/735-aseroid-collision/</guid>
      <description>LC 735 Aseroid Collision We are given an array asteroids of integers representing asteroids in a row. For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed. Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size,</description>
    </item>
    
    <item>
      <title>141 Linked List Cycle</title>
      <link>https://foxisawesome.github.io/posts/141-linked-list-cycle/</link>
      <pubDate>Sun, 30 Aug 2020 21:35:50 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/141-linked-list-cycle/</guid>
      <description>LC 141 Linked List Cycle Given a linked list, determine if it has a cycle in it. To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list. Example 1: Input: head = [3,2,0,-4], pos = 1 Output: true Explanation: There</description>
    </item>
    
    <item>
      <title>328 Odd Even Linked List</title>
      <link>https://foxisawesome.github.io/posts/328-odd-even-linked-list/</link>
      <pubDate>Sun, 30 Aug 2020 21:27:32 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/328-odd-even-linked-list/</guid>
      <description>LC 328 Odd Even Linked List Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes. You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity. Example 1: Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 1-&amp;gt;3-&amp;gt;5-&amp;gt;2-&amp;gt;4-&amp;gt;NULL Solution 2020-08-30 Notes: linked list 终</description>
    </item>
    
    <item>
      <title>1266 Minimum Time Visiting All Points</title>
      <link>https://foxisawesome.github.io/posts/1266-minimum-time-visiting-all-points/</link>
      <pubDate>Sun, 30 Aug 2020 21:24:22 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1266-minimum-time-visiting-all-points/</guid>
      <description>LC 1266 Minimum Time Visiting All Points On a plane there are n points with integer coordinates points[i] = [xi, yi]. Your task is to find the minimum time in seconds to visit all points. You can move according to the next rules: In one second always you can either move vertically, horizontally by one unit or diagonally (it means to move one unit vertically and one unit horizontally in</description>
    </item>
    
    <item>
      <title>530 Min Abs Dif BST</title>
      <link>https://foxisawesome.github.io/posts/530-min-abs-dif-bst/</link>
      <pubDate>Sun, 30 Aug 2020 20:59:36 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/530-min-abs-dif-bst/</guid>
      <description>LC 530
Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.
 Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.
Example:
Input: 1 \ 3 / 2 Output: 1 Explanation: The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).   8/30/2020 Note:</description>
    </item>
    
    <item>
      <title>98 Valid BST</title>
      <link>https://foxisawesome.github.io/posts/98-valid-bst/</link>
      <pubDate>Sun, 30 Aug 2020 20:59:02 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/98-valid-bst/</guid>
      <description>LC 98 Valid BST Given a binary tree, determine if it is a valid binary search tree (BST). Assume a BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node&amp;rsquo;s key. The right subtree of a node contains only nodes with keys greater than the node&amp;rsquo;s key. Both the left and right subtrees must also be binary search trees. Example</description>
    </item>
    
    <item>
      <title>701 Insert Into BST</title>
      <link>https://foxisawesome.github.io/posts/701-insert-into-bst/</link>
      <pubDate>Sun, 30 Aug 2020 20:58:29 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/701-insert-into-bst/</guid>
      <description>LC 701 Given the root node of a binary search tree (BST) and a value to be inserted into the tree, insert the value into the BST. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST. Note that there may exist multiple valid ways for the insertion, as long as the tree remains a BST</description>
    </item>
    
    <item>
      <title>Sliding Window Note</title>
      <link>https://foxisawesome.github.io/notes/sliding-window-note/</link>
      <pubDate>Sun, 30 Aug 2020 17:08:55 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/notes/sliding-window-note/</guid>
      <description>滑动窗口算法的思路是这样： 1、我们在字符串S中使用双指针中的左右指针技巧，初始化left = right = 0，把索引左闭右开区间[left, right)</description>
    </item>
    
    <item>
      <title>Linked List Note (First Post)</title>
      <link>https://foxisawesome.github.io/notes/linked-list-note/</link>
      <pubDate>Sun, 30 Aug 2020 16:54:06 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/notes/linked-list-note/</guid>
      <description>开始刷Leetcode 好几个月了，今天开始学很多人用blog 记录下自己的notes，也激励自己好好刷题！First post! It takes a while for me to get how exactly Linked List</description>
    </item>
    
    <item>
      <title>917 Reverse Only Letters</title>
      <link>https://foxisawesome.github.io/posts/917-reverse-only-letters/</link>
      <pubDate>Sat, 29 Aug 2020 15:47:12 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/917-reverse-only-letters/</guid>
      <description>LC 917 Reverse Only Letters   Given a string S, return the &amp;ldquo;reversed&amp;rdquo; string where all characters that are not a letter stay in the same place, and all letters reverse their positions.
 Solution 2020-08-29 Notes: class Solution: def reverseOnlyLetters(self, S: str) -&amp;gt; str: if not S: return &#39;&#39; out = list(S) n = len(S) l, r = 0, n-1 while l &amp;lt; r: if not S[l].isalpha() and not S[r].</description>
    </item>
    
    <item>
      <title>50 Powx N</title>
      <link>https://foxisawesome.github.io/posts/50-powx-n/</link>
      <pubDate>Fri, 28 Aug 2020 13:47:34 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/50-powx-n/</guid>
      <description>LC 50 Powx N Implement pow(x, n), which calculates x raised to the power n (i.e. x^n). Solution 2020-09-25 Notes: 一个月水平进化了一点。 class Solution: def myPow(self, x: float, n: int) -&amp;gt; float: if n &amp;lt; 0: return self.myPow(1/x,abs(n)) if n == 0: return 1 if n % 2 ==0: ans = self.myPow(x,n//2) ** 2 else: ans = x * self.myPow(x, n//2)</description>
    </item>
    
    <item>
      <title>滑动窗口技巧</title>
      <link>https://foxisawesome.github.io/posts/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 10 Aug 2020 21:59:37 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7/</guid>
      <description>本文详解「滑动窗口」这种高级双指针技巧的算法框架，带你秒杀几道高难度的子字符串匹配问题。 LeetCode 上至少有 9 道题目可以用此方法高效解决。但是有几道是</description>
    </item>
    
    <item>
      <title>42 Trapping Rain Water</title>
      <link>https://foxisawesome.github.io/posts/42-trapping-rain-water/</link>
      <pubDate>Wed, 05 Aug 2020 14:01:29 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/42-trapping-rain-water/</guid>
      <description>LC 42 Trapping Rain Water Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. Solution 2020-08-05 Notes: 短边原理，左右指针同时走，r_max 大时短边在left，所以计算lef</description>
    </item>
    
    <item>
      <title>206 Reverse Linked List</title>
      <link>https://foxisawesome.github.io/posts/206-reverse-linked-list/</link>
      <pubDate>Sat, 01 Aug 2020 20:06:27 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/206-reverse-linked-list/</guid>
      <description>LC 206 Reverse Linked List Reverse a singly linked list. Example: Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL Solution 2020-09-01 Notes: 这题刷了不下10遍了，终于明白iteration这里的四步操作了。 # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next</description>
    </item>
    
    <item>
      <title>回溯算法详解</title>
      <link>https://foxisawesome.github.io/posts/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BF%AE%E8%AE%A2%E7%89%88/</link>
      <pubDate>Sat, 11 Jul 2020 21:59:37 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BF%AE%E8%AE%A2%E7%89%88/</guid>
      <description>这篇文章是很久之前的一篇《回溯算法详解》的进阶版，之前那篇不够清楚，就不必看了，看这篇就行。把框架给你讲清楚，你会发现回溯算法问题都是一个套</description>
    </item>
    
    <item>
      <title>1112 Highest Grade for Each Student</title>
      <link>https://foxisawesome.github.io/posts/1112-highest-grade-for-each-student/</link>
      <pubDate>Thu, 09 Jul 2020 11:13:51 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1112-highest-grade-for-each-student/</guid>
      <description>LC 1112 Highest Grade for Each Student Write a SQL query to find the highest grade with its corresponding course for each student. In case of a tie, you should find the course with the smallest course_id. The output must be sorted by increasing student_id. The query result format is in the following example: Enrollments table: +------------+-------------------+ | student_id | course_id | grade | +------------+-----------+-------+ | 2 | 2 |</description>
    </item>
    
    <item>
      <title>2 Add Two Num</title>
      <link>https://foxisawesome.github.io/posts/2-add-two-num/</link>
      <pubDate>Thu, 02 Jul 2020 10:08:20 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/2-add-two-num/</guid>
      <description>LC 2 Add Two Num You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Example: Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt;</description>
    </item>
    
    <item>
      <title>169 Majority Element</title>
      <link>https://foxisawesome.github.io/posts/169-majority-element/</link>
      <pubDate>Fri, 24 Apr 2020 13:06:24 -0400</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/169-majority-element/</guid>
      <description>LC 169 Majority Element Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times. You may assume that the array is non-empty and the majority element always exist in the array. Solution 2020-09-24 Notes: 这道题有很多种方法做。 hash table做法。 class Solution:</description>
    </item>
    
  </channel>
</rss>
