<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tree on Q. Weng</title>
    <link>https://foxisawesome.github.io/tags/tree/</link>
    <description>Recent content in tree on Q. Weng</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 13 Oct 2020 16:05:34 -0400</lastBuildDate>
    
        <atom:link href="https://foxisawesome.github.io/tags/tree/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1412 Total Sales Amount by Year</title>
      <link>https://foxisawesome.github.io/posts/1412-total-sales-amount-by-year/</link>
      <pubDate>Fri, 06 Nov 2020 13:34:35 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1412-total-sales-amount-by-year/</guid>
      <description>LC 1412 Total Sales Amount by Year Write an SQL query to report the students (student_id, student_name) being &amp;ldquo;quiet&amp;rdquo; in ALL exams. Don&amp;rsquo;t return the student who has never taken any exam. Return the result table ordered by student_id. The query result format is in the following example. Student table: +-------------+---------------+ | student_id | student_name | +-------------+---------------+ | 1 | Daniel | | 2 | Jade | | 3 |</description>
    </item>
    
    <item>
      <title>1384 Total Sales Amount by Year</title>
      <link>https://foxisawesome.github.io/sql/1384-total-sales-amount-by-year/</link>
      <pubDate>Fri, 06 Nov 2020 13:34:15 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1384-total-sales-amount-by-year/</guid>
      <description>LC 1384 Total Sales Amount by Year    Solution 2020-11-06 Notes:     </description>
    </item>
    
    <item>
      <title>1645 Hopper Company Queries II</title>
      <link>https://foxisawesome.github.io/sql/1645-hopper-company-queries-ii/</link>
      <pubDate>Fri, 06 Nov 2020 13:33:42 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1645-hopper-company-queries-ii/</guid>
      <description>LC 1645 Hopper Company Queries II    Solution 2020-11-06 Notes:     </description>
    </item>
    
    <item>
      <title>1635 Hopper Company Queries I</title>
      <link>https://foxisawesome.github.io/sql/1635-hopper-company-queries-i/</link>
      <pubDate>Fri, 06 Nov 2020 13:33:26 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1635-hopper-company-queries-i/</guid>
      <description>LC 1635 Hopper Company Queries I    Solution 2020-11-06 Notes:     </description>
    </item>
    
    <item>
      <title>1633 Percentage of Users Attended a Contest</title>
      <link>https://foxisawesome.github.io/sql/1633-percentage-of-users-attended-a-contest/</link>
      <pubDate>Fri, 06 Nov 2020 13:33:11 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1633-percentage-of-users-attended-a-contest/</guid>
      <description>LC 1633 Percentage of Users Attended a Contest    Solution 2020-11-06 Notes:     </description>
    </item>
    
    <item>
      <title>1565 Unique Orders and Customers per Month</title>
      <link>https://foxisawesome.github.io/sql/1565-unique-orders-and-customers-per-month/</link>
      <pubDate>Fri, 06 Nov 2020 13:32:52 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1565-unique-orders-and-customers-per-month/</guid>
      <description>LC 1565 Unique Orders and Customers per Month    Solution 2020-11-06 Notes:     </description>
    </item>
    
    <item>
      <title>1555 Bank Account Summary</title>
      <link>https://foxisawesome.github.io/sql/1555-bank-account-summary/</link>
      <pubDate>Fri, 06 Nov 2020 13:32:28 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1555-bank-account-summary/</guid>
      <description>LC 1555 Bank Account Summary    Solution 2020-11-06 Notes:     </description>
    </item>
    
    <item>
      <title>1549 the Most Recent Orders for Each Product</title>
      <link>https://foxisawesome.github.io/sql/1549-the-most-recent-orders-for-each-product/</link>
      <pubDate>Fri, 06 Nov 2020 13:32:13 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1549-the-most-recent-orders-for-each-product/</guid>
      <description>LC 1549 the Most Recent Orders for Each Product    Solution 2020-11-06 Notes:     </description>
    </item>
    
    <item>
      <title>1527 Patients With a Condition</title>
      <link>https://foxisawesome.github.io/sql/1527-patients-with-a-condition/</link>
      <pubDate>Fri, 06 Nov 2020 13:31:51 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/sql/1527-patients-with-a-condition/</guid>
      <description>LC 1527 Patients With a Condition    Solution 2020-11-06 Notes:     </description>
    </item>
    
    <item>
      <title>1468 Calculate Salaries</title>
      <link>https://foxisawesome.github.io/posts/1468-calculate-salaries/</link>
      <pubDate>Fri, 06 Nov 2020 13:31:33 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1468-calculate-salaries/</guid>
      <description>LC 1468 Calculate Salaries Write an SQL query to find the salaries of the employees after applying taxes. The tax rate is calculated for each company based on the following criteria: 0% If the max salary of any employee in the company is less than 1000$. 24% If the max salary of any employee in the company is in the range [1000, 10000] inclusive. 49% If the max salary of</description>
    </item>
    
    <item>
      <title>1459 Rectangles Area</title>
      <link>https://foxisawesome.github.io/posts/1459-rectangles-area/</link>
      <pubDate>Fri, 06 Nov 2020 13:31:17 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1459-rectangles-area/</guid>
      <description>LC 1459 Rectangles Area Write an SQL query to report of all possible rectangles which can be formed by any two points of the table. Each row in the result contains three columns (p1, p2, area) where: p1 and p2 are the id of two opposite corners of a rectangle and p1 &amp;lt; p2. Area of this rectangle is represented by the column area. Report the query in descending order</description>
    </item>
    
    <item>
      <title>1238 Circular Permutation in Binary Representation</title>
      <link>https://foxisawesome.github.io/posts/1238-circular-permutation-in-binary-representation/</link>
      <pubDate>Wed, 04 Nov 2020 14:40:15 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1238-circular-permutation-in-binary-representation/</guid>
      <description>LC 1238 Circular Permutation in Binary Representation    Solution 2020-11-04 Notes:  gray code 1 &amp;laquo; n = 2**n   class Solution: def circularPermutation(self, n: int, start: int) -&amp;gt; List[int]: return [start ^ i ^ i &amp;gt;&amp;gt; 1 for i in range(1 &amp;lt;&amp;lt; n)] # Time O(2^N) # Space O(2^N)  bit manipulation:</description>
    </item>
    
    <item>
      <title>1351 Count Negative Numbers in a Sorted Matrix</title>
      <link>https://foxisawesome.github.io/posts/1351-count-negative-numbers-in-a-sorted-matrix/</link>
      <pubDate>Wed, 04 Nov 2020 13:35:18 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1351-count-negative-numbers-in-a-sorted-matrix/</guid>
      <description>LC 1351 Count Negative Numbers in a Sorted Matrix   Given a m * n matrix grid which is sorted in non-increasing order both row-wise and column-wise.
Return the number of negative numbers in grid.
Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]] Output: 8 Explanation: There are 8 negatives number in the matrix.   Solution 2020-11-04 Notes: class Solution: def countNegatives(self, grid: List[List[int]]) -&amp;gt; int: nr, nc = len(grid), len(grid[0]) ans, i = 0, 0 while i &amp;lt; nr: j = 0 while j &amp;lt; nc: if grid[i][j] &amp;lt; 0: ans += nc-j break else: j += 1 i += 1 return ans # Time O(MN) # Space O(1)  </description>
    </item>
    
    <item>
      <title>942 Di String Match</title>
      <link>https://foxisawesome.github.io/posts/942-di-string-match/</link>
      <pubDate>Tue, 03 Nov 2020 10:43:04 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/942-di-string-match/</guid>
      <description>LC 942 Di String Match Given a string S that only contains &amp;ldquo;I&amp;rdquo; (increase) or &amp;ldquo;D&amp;rdquo; (decrease), let N = S.length. Return any permutation A of [0, 1, ..., N] such that for all i = 0, ..., N-1: If S[i] == &amp;quot;I&amp;quot;, then A[i] &amp;lt; A[i+1] If S[i] == &amp;quot;D&amp;quot;, then A[i] &amp;gt; A[i+1] Input: &amp;quot;IDID&amp;quot; Output: [0,4,1,3,2] Solution 2020-11-03 Notes: 这题的examp</description>
    </item>
    
    <item>
      <title>1051 Height Checker</title>
      <link>https://foxisawesome.github.io/posts/1051-height-checker/</link>
      <pubDate>Tue, 03 Nov 2020 10:15:17 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1051-height-checker/</guid>
      <description>LC 1051 Height Checker Students are asked to stand in non-decreasing order of heights for an annual photo. Return the minimum number of students that must move in order for all students to be standing in non-decreasing order of height. Notice that when a group of students is selected they can reorder in any possible way between themselves and the non selected students remain on their seats. Input: heights =</description>
    </item>
    
    <item>
      <title>346 Moving Average From Data Stream</title>
      <link>https://foxisawesome.github.io/posts/346-moving-average-from-data-stream/</link>
      <pubDate>Tue, 03 Nov 2020 09:17:13 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/346-moving-average-from-data-stream/</guid>
      <description>LC 346 Moving Average From Data Stream Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window. MovingAverage m = new MovingAverage(3); m.next(1) = 1 m.next(10) = (1 + 10) / 2 m.next(3) = (1 + 10 + 3) / 3 m.next(5) = (10 + 3 + 5) / 3 Solution 2020-11-03 Notes: follow-ups: how about calc variance of streaming</description>
    </item>
    
    <item>
      <title>57 Insert Interval</title>
      <link>https://foxisawesome.github.io/posts/57-insert-interval/</link>
      <pubDate>Mon, 02 Nov 2020 13:42:31 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/57-insert-interval/</guid>
      <description>LC 57 Insert Interval   Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.
Input: intervals = [[1,3],[6,9]], newInterval = [2,5] Output: [[1,5],[6,9]]  Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] Output: [[1,2],[3,10],[12,16]] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].   Solution 2020-11-02 Notes:  greedy algo.</description>
    </item>
    
    <item>
      <title>1407 Top Travellers</title>
      <link>https://foxisawesome.github.io/posts/1407-top-travellers/</link>
      <pubDate>Sun, 01 Nov 2020 13:27:09 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1407-top-travellers/</guid>
      <description>LC 1407 Top Travellers   Write an SQL query to report the distance travelled by each user.
Return the result table ordered by travelled_distance in descending order, if two or more users travelled the same distance, order them by their name in ascending order.
The query result format is in the following example.
Users table: +------+-----------+ | id | name | +------+-----------+ | 1 | Alice | | 2 | Bob | | 3 | Alex | | 4 | Donald | | 7 | Lee | | 13 | Jonathan | | 19 | Elvis | +------+-----------+ Rides table: +------+----------+----------+ | id | user_id | distance | +------+----------+----------+ | 1 | 1 | 120 | | 2 | 2 | 317 | | 3 | 3 | 222 | | 4 | 7 | 100 | | 5 | 13 | 312 | | 6 | 19 | 50 | | 7 | 7 | 120 | | 8 | 19 | 400 | | 9 | 7 | 230 | +------+----------+----------+ Result table: +----------+--------------------+ | name | travelled_distance | +----------+--------------------+ | Elvis | 450 | | Lee | 450 | | Bob | 317 | | Jonathan | 312 | | Alex | 222 | | Alice | 120 | | Donald | 0 | +----------+--------------------+ Elvis and Lee travelled 450 miles, Elvis is the top traveller as his name is alphabetically smaller than Lee.</description>
    </item>
    
    <item>
      <title>1440 Evaluate Boolean Expression</title>
      <link>https://foxisawesome.github.io/posts/1440-evaluate-boolean-expression/</link>
      <pubDate>Sun, 01 Nov 2020 13:23:21 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1440-evaluate-boolean-expression/</guid>
      <description>LC 1440 Evaluate Boolean Expression   Write an SQL query to evaluate the boolean expressions in Expressions table.
Return the result table in any order.
The query result format is in the following example.
Variables table: +------+-------+ | name | value | +------+-------+ | x | 66 | | y | 77 | +------+-------+ Expressions table: +--------------+----------+---------------+ | left_operand | operator | right_operand | +--------------+----------+---------------+ | x | &amp;gt; | y | | x | &amp;lt; | y | | x | = | y | | y | &amp;gt; | x | | y | &amp;lt; | x | | x | = | x | +--------------+----------+---------------+ Result table: +--------------+----------+---------------+-------+ | left_operand | operator | right_operand | value | +--------------+----------+---------------+-------+ | x | &amp;gt; | y | false | | x | &amp;lt; | y | true | | x | = | y | false | | y | &amp;gt; | x | true | | y | &amp;lt; | x | false | | x | = | x | true | +--------------+----------+---------------+-------+ As shown, you need find the value of each boolean exprssion in the table using the variables table.</description>
    </item>
    
    <item>
      <title>1435 Create a Session Bar Chart</title>
      <link>https://foxisawesome.github.io/posts/1435-create-a-session-bar-chart/</link>
      <pubDate>Sun, 01 Nov 2020 13:21:24 -0500</pubDate>
      
      <guid>https://foxisawesome.github.io/posts/1435-create-a-session-bar-chart/</guid>
      <description>LC 1435 Create a Session Bar Chart   Write an SQL query to report the (bin, total) in any order.
The query result format is in the following example.
Sessions table: +-------------+---------------+ | session_id | duration | +-------------+---------------+ | 1 | 30 | | 2 | 199 | | 3 | 299 | | 4 | 580 | | 5 | 1000 | +-------------+---------------+ Result table: +--------------+--------------+ | bin | total | +--------------+--------------+ | [0-5&amp;gt; | 3 | | [5-10&amp;gt; | 1 | | [10-15&amp;gt; | 0 | | 15 or more | 1 | +--------------+--------------+ For session_id 1, 2 and 3 have a duration greater or equal than 0 minutes and less than 5 minutes.</description>
    </item>
    
  </channel>
</rss>
